{"version":3,"file":"task-category-selector.stories-76fJ5gFm.js","sources":["../../components/stories/task-category-selector.stories.tsx"],"sourcesContent":["import { TaskCategorySelector } from \"../ui/task-category-selector\";\nimport type { Meta, StoryObj } from \"@storybook/react\";\nimport React, { useState } from \"react\";\nimport { Popover, PopoverTrigger, PopoverContent } from \"@/components/ui/popover\";\nimport { Badge } from \"@/components/ui/badge\";\n\nconst mockCategories = [\n  \"Синтаксис\",\n  \"Орфография\",\n  \"Пунктуация\",\n  \"Лексика\",\n  \"Морфология\",\n];\n\nconst meta: Meta<typeof TaskCategorySelector> = {\n  title: \"Blocks/TaskCategorySelector\",\n  component: TaskCategorySelector,\n};\nexport default meta;\n\ntype Story = StoryObj<typeof TaskCategorySelector>;\n\nexport const Default: Story = {\n  render: () => {\n    const [selected, setSelected] = useState<string[]>([mockCategories[0]]);\n    return (\n      <div style={{ minWidth: 90, maxWidth: 220 }}>\n        <TaskCategorySelector\n          taskNumber={\"1\"}\n          selectedCategories={selected}\n          onCategoriesChange={setSelected}\n        />\n      </div>\n    );\n  },\n};\n\nexport const DropdownChips: Story = {\n  render: () => {\n    // Категории для taskNumber 1 (без 'Синтаксис')\n    const categories = [\n      \"Предлоги\",\n      \"Союзы\",\n      \"Частицы\",\n      \"Местоимения\",\n      \"Наречия\",\n      \"Вводные слова\",\n    ];\n    const [selected, setSelected] = useState<string[]>([...categories]);\n    // Логика выбора: если выбраны все — это 'Все категории', если снимаем все — снова все\n    const handleChange = (cat: string) => {\n      let newSelected;\n      if (selected.includes(cat)) {\n        newSelected = selected.filter((c) => c !== cat);\n      } else {\n        newSelected = [...selected, cat];\n      }\n      // Если ничего не выбрано — снова все\n      if (newSelected.length === 0) newSelected = [...categories];\n      // Если выбраны все кроме одного — это тоже 'Все категории'\n      if (newSelected.length === categories.length) newSelected = [...categories];\n      setSelected(newSelected);\n    };\n    // Формат отображения выбранных\n    const selectedLabel =\n      selected.length === categories.length\n        ? \"Все категории\"\n        : selected.length === 1\n        ? selected[0]\n        : selected.length === 2\n        ? `${selected[0]} и ${selected[1]}`\n        : `${selected.slice(0, -1).join(\", \")} и ${selected[selected.length - 1]}`;\n    // SVG шеврона\n    const Chevron = ({ open }: { open: boolean }) => (\n      <svg\n        width=\"16\"\n        height=\"16\"\n        viewBox=\"0 0 16 16\"\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        style={{\n          marginLeft: 6,\n          transition: \"transform 0.2s\",\n          transform: open ? \"rotate(180deg)\" : \"rotate(0deg)\",\n        }}\n      >\n        <path\n          d=\"M4.5 6L8 9.5L11.5 6\"\n          stroke=\"#888\"\n          strokeWidth=\"1.5\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n      </svg>\n    );\n    // Кнопка закрытия для мобильных\n    const MobileCloseButton = ({ setOpen }: { setOpen: (v: boolean) => void }) => (\n      <button\n        onClick={() => setOpen(false)}\n        style={{\n          display: \"block\",\n          width: \"100%\",\n          marginTop: 10,\n          padding: \"8px 0\",\n          background: \"#f3f3f3\",\n          border: \"none\",\n          borderRadius: 6,\n          color: \"#333\",\n          fontSize: 14,\n          fontWeight: 500,\n          cursor: \"pointer\",\n        }}\n        className=\"mobile-only\"\n      >\n        Закрыть\n      </button>\n    );\n    const [open, setOpen] = useState(false);\n    return (\n      <div style={{ maxWidth: 340 }}>\n        <Popover open={open} onOpenChange={setOpen}>\n          <PopoverTrigger asChild>\n            <Badge\n              variant=\"outline\"\n              className=\"cursor-pointer py-1 px-3 flex items-center gap-1.5 hover:bg-gray-100 transition-colors dropdown-badge\"\n              style={{\n                minWidth: 0,\n                width: \"fit-content\",\n                maxWidth: \"none\",\n                paddingRight: 10,\n                paddingLeft: 14,\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"space-between\",\n                whiteSpace: \"nowrap\",\n                fontWeight: 400,\n              }}\n            >\n              <span className=\"text-xs\" style={{ overflow: \"hidden\", textOverflow: \"ellipsis\", fontWeight: 400 }}>\n                {selectedLabel}\n              </span>\n              <Chevron open={open} />\n            </Badge>\n          </PopoverTrigger>\n          <PopoverContent\n            className=\"w-auto p-2\"\n            style={{\n              minWidth: 220,\n              maxWidth: 320,\n              display: \"flex\",\n              flexWrap: \"wrap\",\n              gap: 8,\n              flexDirection: \"column\",\n              alignItems: \"stretch\",\n            }}\n          >\n            <div style={{ display: \"flex\", flexWrap: \"wrap\", gap: 8 }}>\n              {/* Все категории */}\n              <Badge\n                key=\"all\"\n                variant={selected.length === categories.length ? \"default\" : \"outline\"}\n                className={`cursor-pointer transition-colors text-xs px-2 py-0.5 flex items-center gap-1 ${\n                  selected.length === categories.length\n                    ? \"bg-teal-600 hover:bg-teal-700 text-white border-teal-600\"\n                    : \"border-gray-300 text-gray-700 hover:bg-gray-100\"\n                }`}\n                style={{ fontWeight: 400 }}\n                onClick={() => setSelected([...categories])}\n              >\n                Все категории\n              </Badge>\n              {categories.map((cat) => (\n                <Badge\n                  key={cat}\n                  variant={selected.includes(cat) && selected.length !== categories.length ? \"default\" : \"outline\"}\n                  className={`cursor-pointer transition-colors text-xs px-2 py-0.5 flex items-center gap-1 ${\n                    selected.includes(cat) && selected.length !== categories.length\n                      ? \"bg-teal-600 hover:bg-teal-700 text-white border-teal-600\"\n                      : \"border-gray-300 text-gray-700 hover:bg-gray-100\"\n                  }`}\n                  style={{ fontWeight: 400 }}\n                  onClick={() => {\n                    if (selected.length === categories.length) {\n                      setSelected([cat]);\n                    } else {\n                      handleChange(cat);\n                    }\n                  }}\n                >\n                  {cat}\n                </Badge>\n              ))}\n            </div>\n            <div className=\"desktop-close-hint\" style={{ marginTop: 10, color: \"#888\", fontSize: 13, textAlign: \"center\" }}>\n              ESC или клик вне меню для закрытия\n            </div>\n            <div className=\"mobile-close-btn\" style={{ display: \"none\" }}>\n              <MobileCloseButton setOpen={setOpen} />\n            </div>\n            <style>{`\n              @media (max-width: 600px) {\n                .mobile-close-btn { display: block !important; }\n                .desktop-close-hint { display: none !important; }\n                .dropdown-badge {\n                  width: calc(100vw - 32px) !important;\n                  margin: 0 16px !important;\n                  max-width: 100vw !important;\n                }\n              }\n              .dropdown-badge, .dropdown-badge * {\n                font-weight: 400 !important;\n              }\n            `}</style>\n          </PopoverContent>\n        </Popover>\n      </div>\n    );\n  },\n}; "],"names":["meta","TaskCategorySelector","title","component","Default","minWidth","maxWidth","DropdownChips","render","selected","setSelected","useState","mockCategories","categories","handleChange","newSelected","Chevron","open","marginLeft","cat","transition","transform","filter","c","setOpen","length","display","marginTop","padding","background","border","borderRadius","color","fontSize","fontWeight","slice","join","width","paddingRight","paddingLeft","alignItems","justifyContent","whiteSpace","textOverflow","MobileCloseButton","flexWrap","gap","flexDirection","PopoverTrigger","Badge","overflow","PopoverContent","parameters","map","source","includes","docs"],"mappings":"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"}