{"version":3,"file":"page-CdMqY4gx.js","sources":["../../node_modules/lucide-react/dist/esm/icons/arrow-left.js","../../node_modules/lucide-react/dist/esm/icons/pen.js","../../data/difficulty-data.ts","../../app/page.tsx"],"sourcesContent":["/**\n * @license lucide-react v0.454.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst ArrowLeft = createLucideIcon(\"ArrowLeft\", [\n  [\"path\", { d: \"m12 19-7-7 7-7\", key: \"1l729n\" }],\n  [\"path\", { d: \"M19 12H5\", key: \"x3x0zl\" }]\n]);\n\nexport { ArrowLeft as default };\n//# sourceMappingURL=arrow-left.js.map\n","/**\n * @license lucide-react v0.454.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Pen = createLucideIcon(\"Pen\", [\n  [\n    \"path\",\n    {\n      d: \"M21.174 6.812a1 1 0 0 0-3.986-3.987L3.842 16.174a2 2 0 0 0-.5.83l-1.321 4.352a.5.5 0 0 0 .623.622l4.353-1.32a2 2 0 0 0 .83-.497z\",\n      key: \"1a8usu\"\n    }\n  ]\n]);\n\nexport { Pen as default };\n//# sourceMappingURL=pen.js.map\n","// data/difficulty-data.ts\r\n\r\n// Структура для хранения статистики сложности по каждому заданию\r\nexport interface TaskDifficultyStats {\r\n  easiest: number; // Количество \"самых легких\" заданий\r\n  easy: number;    // Количество \"легких\" заданий\r\n  medium: number;  // Количество \"средних\" заданий\r\n  hard: number;    // Количество \"сложных\" заданий\r\n  hardest: number; // Количество \"самых сложных\" заданий\r\n  // Можно добавить unclassified, если нужно\r\n}\r\n\r\n// Тип для объекта, хранящего статистику по ID задания\r\n// ID задания будет строкой для унификации (e.g., \"tasks-1\", \"ege-1-1\", \"ex-1-1-1\")\r\nexport type DifficultyDataMap = Record<string, TaskDifficultyStats>;\r\n\r\n// Мок-данные, имитирующие данные из отчета\r\n// Используем ID из test-content.ts, добавляя префикс вкладки для уникальности\r\nexport const difficultyStatsData: DifficultyDataMap = {\r\n  // --- Задания из вкладки \"По заданиям\" (префикс 'tasks-') ---\r\n  \"tasks-1\":  { easiest: 2, easy: 5, medium: 10, hard: 6, hardest: 1 },\r\n  \"tasks-2\":  { easiest: 3, easy: 8, medium: 12, hard: 5, hardest: 2 },\r\n  \"tasks-3\":  { easiest: 0, easy: 2, medium: 8,  hard: 10, hardest: 5 }, // Пример сложного\r\n  \"tasks-26\": { easiest: 1, easy: 4, medium: 9,  hard: 7, hardest: 3 },\r\n  \"tasks-4\":  { easiest: 5, easy: 10, medium: 15, hard: 3, hardest: 1 },\r\n  \"tasks-5\":  { easiest: 8, easy: 15, medium: 10, hard: 2, hardest: 0 }, // Пример легкого\r\n  \"tasks-6\":  { easiest: 2, easy: 6, medium: 11, hard: 8, hardest: 2 },\r\n  \"tasks-7\":  { easiest: 1, easy: 5, medium: 10, hard: 9, hardest: 4 },\r\n  \"tasks-8\":  { easiest: 0, easy: 1, medium: 7,  hard: 12, hardest: 6 }, // Пример сложного\r\n  \"tasks-9\":  { easiest: 3, easy: 7, medium: 13, hard: 6, hardest: 2 },\r\n  \"tasks-10\": { easiest: 4, easy: 8, medium: 14, hard: 5, hardest: 1 },\r\n  \"tasks-11\": { easiest: 2, easy: 6, medium: 12, hard: 7, hardest: 3 },\r\n  \"tasks-12\": { easiest: 0, easy: 2, medium: 9,  hard: 11, hardest: 5 }, // Пример сложного\r\n  \"tasks-13\": { easiest: 3, easy: 8, medium: 11, hard: 6, hardest: 2 },\r\n  \"tasks-14\": { easiest: 2, easy: 7, medium: 13, hard: 7, hardest: 3 },\r\n  \"tasks-15\": { easiest: 4, easy: 9, medium: 12, hard: 5, hardest: 1 },\r\n  \"tasks-16\": { easiest: 3, easy: 7, medium: 10, hard: 8, hardest: 3 },\r\n  \"tasks-17\": { easiest: 2, easy: 6, medium: 11, hard: 9, hardest: 4 },\r\n  \"tasks-18\": { easiest: 1, easy: 3, medium: 8,  hard: 12, hardest: 6 }, // Пример сложного\r\n  \"tasks-19\": { easiest: 3, easy: 8, medium: 12, hard: 7, hardest: 2 },\r\n  \"tasks-20\": { easiest: 1, easy: 4, medium: 9,  hard: 11, hardest: 5 }, // Пример сложного\r\n  \"tasks-21\": { easiest: 2, easy: 7, medium: 11, hard: 8, hardest: 3 },\r\n  \"tasks-22\": { easiest: 4, easy: 9, medium: 13, hard: 5, hardest: 1 },\r\n  \"tasks-23\": { easiest: 3, easy: 8, medium: 12, hard: 6, hardest: 2 },\r\n  \"tasks-24\": { easiest: 1, easy: 3, medium: 8,  hard: 10, hardest: 5 }, // Пример сложного\r\n  \"tasks-25\": { easiest: 2, easy: 6, medium: 10, hard: 9, hardest: 4 },\r\n  // --- Добавьте ID из вкладок \"Формат ЕГЭ\" (префикс 'ege-') и \"Упражнения\" (префикс 'ex-') по аналогии ---\r\n  // Пример для ЕГЭ\r\n  \"ege-1-1\": { easiest: 5, easy: 10, medium: 8, hard: 3, hardest: 1 }, // ID = 1, Категория = 1, Секция = 1 (?)\r\n  // Пример для Упражнений\r\n  \"ex-1-1-1\": { easiest: 10, easy: 15, medium: 5, hard: 1, hardest: 0 }, // ID = 1, Категория = 1, Секция = 1 (?)\r\n}; ","\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { ChevronDown, ChevronUp, Edit2, ArrowLeft, User, FolderPlus, Dice3 } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { Card, CardContent } from \"@/components/ui/card\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { tasksData, egeFormatData, exercisesData, TestItem, TestCategory, EGESection, EGECategory } from \"@/data/test-content\"\nimport { SelectableExamText } from \"@/components/ui/selectable-exam-text\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { difficultyStatsData, TaskDifficultyStats, DifficultyDataMap } from \"@/data/difficulty-data\"\nimport { TaskCategorySelector } from \"@/components/ui/task-category-selector\"\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\"\nimport { TaskCardBlock } from \"@/components/ui/TaskCardBlock\"\n\n// Define difficulty types\n// type DifficultyType = \"none\" | \"easy\" | \"hard\" | \"both\" // Old types - removed\n// type DifficultyValue = \"easy\" | \"hard\" | \"both\" | null // Old types - removed\n\n// --- Новая структура данных для уровней сложности ---\ninterface DifficultyLevel {\n  id: string // e.g., 'any', 'easiest', 'medium', 'hardest'\n  label: string // e.g., 'Любая', 'Самые лёгкие', 'Средние', 'Самые сложные'\n  count: number // количество доступных вопросов\n}\n\n// --- Базовый интерфейс для элементов заданий ---\ninterface Item {\n  id: string | number // ID может быть строкой или числом\n  count?: number\n  maxCount?: number\n  difficulty?: string // Старое поле, может присутствовать в данных\n  // Добавьте другие общие свойства, если они используются в handleCountChange\n}\n\n// --- Интерфейсы для типизации циклов в handleCountChange ---\ninterface SimpleCategory {\n  items: Item[]\n  // Добавьте другие свойства категории, если они используются\n}\n\ninterface SimpleSection {\n  categories: SimpleCategory[]\n  // Добавьте другие свойства секции, если они используются\n}\n\n// --- Определяем порядок и метки для уровней сложности --- \n// (убираем count из этой структуры, т.к. он будет вычисляться)\ninterface DifficultyTier {\n  id: 'easiest' | 'easy' | 'medium' | 'hard' | 'hardest'; // Уровни сложности\n  label: string; // Метка для отображения\n}\n\nconst difficultyTiers: DifficultyTier[] = [\n  { id: \"easiest\", label: \"Самые лёгкие\" },\n  { id: \"easy\", label: \"Лёгкие\" },\n  { id: \"medium\", label: \"Средние\" },\n  { id: \"hard\", label: \"Сложные\" },\n  { id: \"hardest\", label: \"Самые сложные\" },\n  // { id: \"unclassified\", label: \"Без данных\" }, // Можно добавить при необходимости\n];\n\n// --- Интерфейс для состояния difficultyLevels (включая 'any') ---\ninterface DisplayDifficultyLevel {\n  id: string; // 'any' или id из DifficultyTier\n  label: string;\n  count: number;\n}\n\n// --- Мок-данные для примера ---\n// const mockDifficultyLevels: DifficultyLevel[] = [...]; \n\n// Обновляем интерфейс для хранения выбранных сложностей\ninterface ItemDifficulties {\n  [key: string | number]: string[];  // Changed from string to string[]\n}\n\n// Добавляем интерфейс для хранения выбранных категорий\ninterface ItemCategories {\n  [key: string | number]: string[];\n}\n\nexport default function TestGenerator() {\n  // --- Инициализируем состояния пустыми массивами --- \n  const [testName, setTestName] = useState(\"\")\n  const [testGroup, setTestGroup] = useState<string | undefined>(undefined)\n  const [account, setAccount] = useState<string | undefined>(undefined)\n  const [tasksDataState, setTasksDataState] = useState<TestCategory[] | null>(null);\n  const [egeFormatDataState, setEgeFormatDataState] = useState<EGESection[] | null>(null);\n  const [exercisesDataState, setExercisesDataState] = useState<EGESection[] | null>(null);\n  const [itemDifficulties, setItemDifficulties] = useState<ItemDifficulties>({});\n  const [expandedCategories, setExpandedCategories] = useState<Record<string, boolean>>({});\n  const [selectedTab, setSelectedTab] = useState(\"tasks\");\n  const [newGroup, setNewGroup] = useState(\"\")\n  const [buttonText, setButtonText] = useState(\"Создать тест\")\n\n  const totalLimit = 50\n  const [totalSelected, setTotalSelected] = useState(0)\n  const progress = (totalSelected / totalLimit) * 100\n\n  const [tasksSelected, setTasksSelected] = useState(false)\n  const [egeSelected, setEgeSelected] = useState(false)\n  const [exercisesSelected, setExercisesSelected] = useState(false)\n\n  // Добавляем состояние для отслеживания загрузки\n  const [isLoading, setIsLoading] = useState(true);\n  const [isError, setIsError] = useState(false);\n\n  // Добавляем состояние для хранения выбранных категорий\n  const [itemCategories, setItemCategories] = useState<ItemCategories>({});\n\n  // Модифицируем useEffect для лучшей обработки загрузки данных\n  useEffect(() => {\n    try {\n      // Проверяем наличие данных\n      if (!tasksData || !egeFormatData || !exercisesData) {\n        throw new Error('Data is missing');\n      }\n\n      // Инициализируем данные\n      setTasksDataState(tasksData);\n      setEgeFormatDataState(egeFormatData);\n      setExercisesDataState(exercisesData);\n      \n      // Автоматически разворачиваем первую категорию\n      if (tasksData.length > 0) {\n        setExpandedCategories(prev => ({ ...prev, [tasksData[0].category]: true }));\n      }\n      \n      setIsLoading(false);\n    } catch (error) {\n      console.error('Error initializing data:', error);\n      setIsError(true);\n      setIsLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    updateButtonText()\n  }, [tasksSelected, egeSelected, exercisesSelected])\n\n  const updateButtonText = () => {\n    const selectedTabs = []\n    if (tasksSelected) selectedTabs.push(\"по заданиям\")\n    if (egeSelected) selectedTabs.push(\"ЕГЭ\")\n    if (exercisesSelected) selectedTabs.push(\"упражнения\")\n\n    if (selectedTabs.length === 0) {\n      setButtonText(\"Создать тест\")\n    } else if (selectedTabs.length === 1) {\n      setButtonText(`Создать тест ${selectedTabs[0]}`)\n    } else if (selectedTabs.length === 2) {\n      setButtonText(`Создать тест ${selectedTabs[0]} и ${selectedTabs[1]}`)\n    } else {\n      setButtonText(`Создать тест ${selectedTabs[0]}, ${selectedTabs[1]} и ${selectedTabs[2]}`)\n    }\n  }\n\n  // Добавляем типы к параметрам handleCountChange\n  const handleCountChange = (\n    id: string | number, // ID может быть строкой или числом\n    categoryIdentifier: string, // Используем общее имя\n    increment: number, // Инкремент - число\n    tabType: \"tasks\" | \"ege\" | \"exercises\" // Тип вкладки\n  ) => {\n    let updatedData\n    if (tabType === \"tasks\") {\n      updatedData = JSON.parse(JSON.stringify(tasksDataState))\n      // Find the item and update its count\n      for (const categoryData of updatedData) {\n        // Указываем тип Item для item\n        const item: TestItem | undefined = categoryData.items.find((item: TestItem) => item.id === id)\n        if (item) {\n          const oldCount = item.count || 0\n          const newCount = Math.max(\n            0,\n            Math.min(item.maxCount || 10, oldCount + increment)\n          )\n          item.count = newCount\n\n          // Update total selected count\n          setTotalSelected((prev) =>\n            Math.max(0, Math.min(totalLimit, prev + (newCount - oldCount)))\n          )\n\n          // Update tab selection state if there are any items selected\n          const hasSelectedItems = updatedData.some((cat: TestCategory) =>\n            cat.items.some((item: TestItem) => item.count && item.count > 0)\n          )\n          setTasksSelected(hasSelectedItems)\n          setTasksDataState(updatedData)\n          break\n        }\n      }\n    } else if (tabType === \"ege\" || tabType === \"exercises\") { // Объединяем логику для EGE и Exercises\n      const currentState = tabType === \"ege\" ? egeFormatDataState : exercisesDataState;\n      updatedData = JSON.parse(JSON.stringify(currentState));\n      let found = false;\n      for (const section of updatedData) {\n        for (const categoryData of section.categories) {\n          const item: TestItem | undefined = categoryData.items.find((item: TestItem) => item.id === id);\n          if (item) {\n            const oldCount = item.count || 0;\n            const newCount = Math.max(\n              0,\n              Math.min(item.maxCount || 10, oldCount + increment)\n            );\n            item.count = newCount;\n            setTotalSelected((prev) => Math.max(0, Math.min(totalLimit, prev + (newCount - oldCount))));\n\n            const hasSelectedItems = updatedData.some((sec: EGESection) =>\n              sec.categories.some((cat: EGECategory) =>\n                cat.items.some((i: TestItem) => i.count && i.count > 0)\n              )\n            );\n            if (tabType === \"ege\") setEgeSelected(hasSelectedItems);\n            else setExercisesSelected(hasSelectedItems);\n\n            if (tabType === \"ege\") setEgeFormatDataState(updatedData);\n            else setExercisesDataState(updatedData);\n            found = true;\n            break;\n          }\n        }\n        if (found) break;\n      }\n    }\n  }\n\n  // ADD NEW PER-ITEM HANDLER\n  const handleItemDifficultyChange = (itemId: string | number, difficultyId: string) => {\n    setItemDifficulties(prev => {\n      const currentDifficulties = prev[itemId] || [];\n      \n      // Если выбрана опция \"any\", очищаем все другие\n      if (difficultyId === 'any') {\n        return {\n          ...prev,\n          [itemId]: ['any']\n        };\n      }\n      \n      // Если уже были выбраны конкретные сложности\n      let newDifficulties: string[];\n      if (currentDifficulties.includes(difficultyId)) {\n        // Убираем сложность если она уже была выбрана\n        newDifficulties = currentDifficulties.filter(d => d !== difficultyId);\n        // Если ничего не осталось, устанавливаем \"any\"\n        if (newDifficulties.length === 0) {\n          newDifficulties = ['any'];\n        }\n      } else {\n        // Добавляем новую сложность и убираем \"any\" если она была\n        newDifficulties = currentDifficulties\n          .filter(d => d !== 'any')\n          .concat(difficultyId);\n      }\n      \n      return {\n        ...prev,\n        [itemId]: newDifficulties\n      };\n    });\n  };\n\n  const toggleCategory = (category: string) => {\n    setExpandedCategories((prev) => ({\n      ...prev,\n      [category]: !prev[category],\n    }))\n  }\n\n  // Добавляем функцию для обработки изменения категорий\n  const handleCategoriesChange = (itemId: string | number, categories: string[]) => {\n    setItemCategories({ ...itemCategories, [itemId]: categories });\n  };\n\n  // Функция рендеринга карточки задания\n  const renderItemRow = (item: TestItem, category: TestCategory | EGECategory, tabType: \"tasks\" | \"ege\" | \"exercises\") => {\n    const currentCount = item.count || 0;\n    const maxCount = item.maxCount || 10;\n    const categoryIdentifier = 'category' in category ? category.category : category.title;\n    const statsId = `${tabType}-${item.id}`;\n    const itemStats = difficultyStatsData[statsId] || null;\n    \n    // Определение типа карточки согласно контракту\n    const taskNumber = item.title.match(/№\\s*(\\d+)/)?.[1];\n    const hasCategories = !!taskNumber;\n    const availableCategories = hasCategories \n      ? ['Орфография', 'Пунктуация', 'Лексика', 'Морфология']\n      : [];\n    \n    // Создаем интерактивные блоки в зависимости от данных\n    let interactiveBlock = null;\n    \n    if (hasCategories && itemStats) {\n      // FullCard_B вариант\n      const difficultyDropdown = createDifficultyDropdown(item, itemStats);\n      const categoryDropdown = createCategoryDropdown(item, availableCategories);\n      \n      interactiveBlock = (\n        <div style={{ display: \"flex\", gap: 12, alignItems: \"center\", flexWrap: \"wrap\" }} className=\"sb-interactive-block\">\n          {categoryDropdown}\n          {difficultyDropdown}\n        </div>\n      );\n    } else if (!hasCategories && itemStats) {\n      // OnlyDifficulty_B вариант\n      const difficultyDropdown = createDifficultyDropdown(item, itemStats);\n      \n      interactiveBlock = (\n        <div style={{ display: \"flex\", gap: 12, alignItems: \"center\", flexWrap: \"wrap\" }} className=\"sb-interactive-block\">\n          {difficultyDropdown}\n        </div>\n      );\n    }\n    // Для Minimal_B варианта interactiveBlock остается null\n    \n    return (\n      <TaskCardBlock\n        key={item.id}\n        item={{...item, title: hasCategories ? item.title : item.title.replace(/№\\s*\\d+\\.\\s*/, \"\")}}\n        category={null} // В B-вариантах не используем встроенный селектор категорий\n        currentCount={currentCount}\n        maxCount={maxCount}\n        onDecrement={() => handleCountChange(item.id, categoryIdentifier, -1, tabType)}\n        onIncrement={() => handleCountChange(item.id, categoryIdentifier, 1, tabType)}\n        difficulties={itemDifficulties[item.id] || [\"any\"]}\n        onDifficultyChange={(id: string) => handleItemDifficultyChange(item.id, id)}\n        categories={itemCategories[item.id] || availableCategories}\n        onCategoriesChange={(cats: string[]) => handleCategoriesChange(item.id, cats)}\n        itemStats={itemStats}\n        difficultyTiers={difficultyTiers}\n        difficultyDropdown={interactiveBlock}\n        categoryDropdown={null}\n      />\n    );\n  };\n  \n  // Вспомогательные функции для renderItemRow\n  const createDifficultyDropdown = (item: TestItem, itemStats: TaskDifficultyStats | Record<string, number>) => {\n    const itemId = item.id;\n    const isOpen = false; // Здесь должна быть логика управления открытием/закрытием\n    const difficulties = itemDifficulties[item.id] || [\"any\"];\n    \n    // Получаем текстовую метку для сложности\n    const getDiffLabel = () => {\n      if (!difficulties || difficulties.includes('any')) {\n        return \"любая сложность\";\n      }\n      \n      const labels = difficulties.map(v => {\n        const tier = difficultyTiers.find(t => t.id === v);\n        return tier ? tier.label.toLowerCase() : v.toLowerCase();\n      });\n      \n      if (labels.length === 1) return labels[0];\n      if (labels.length === 2) return `${labels[0]} и ${labels[1]}`;\n      if (labels.length > 2) return `${labels[0]}, ${labels[1]} +${labels.length - 2}`;\n      return \"\";\n    };\n    \n    // Рассчитываем общее количество заданий\n    const totalCount = Object.values(itemStats || {}).reduce((sum, count) => \n      Number(sum) + Number(count), 0);\n    \n    return (\n      <Popover>\n        <PopoverTrigger asChild>\n          <Badge \n            variant=\"outline\" \n            className=\"cursor-pointer py-1 px-3 flex items-center gap-1.5 hover:bg-gray-100 transition-colors dropdown-badge\"\n          >\n            <span className=\"text-xs\">{getDiffLabel()}</span>\n            <ChevronDown className=\"h-3 w-3\" />\n          </Badge>\n        </PopoverTrigger>\n        <PopoverContent className=\"w-auto p-2\">\n          <div className=\"flex flex-wrap gap-2\">\n            <Badge \n              key=\"any\" \n              variant={(!difficulties || difficulties.includes('any')) ? \"default\" : \"outline\"} \n              className=\"cursor-pointer\"\n              onClick={() => handleItemDifficultyChange(item.id, \"any\")}\n            >\n              любая сложность <span className=\"ml-1\">{totalCount}</span>\n            </Badge>\n            \n            {difficultyTiers.map((tier) => {\n              const countForItemTier = itemStats[tier.id] || 0;\n              return (\n                <Badge \n                  key={tier.id} \n                  variant={difficulties.includes(tier.id) && !difficulties.includes('any') ? \"default\" : \"outline\"} \n                  className=\"cursor-pointer\"\n                  onClick={() => handleItemDifficultyChange(item.id, tier.id)}\n                >\n                  {tier.label.toLowerCase()} <span className=\"ml-1\">{countForItemTier}</span>\n                </Badge>\n              );\n            })}\n          </div>\n        </PopoverContent>\n      </Popover>\n    );\n  };\n  \n  const createCategoryDropdown = (item: TestItem, availableCategories: string[]) => {\n    const itemId = item.id;\n    const categories = itemCategories[item.id] || availableCategories;\n    \n    // Получаем текстовую метку для категорий\n    const getCatLabel = () => {\n      if (categories.length === availableCategories.length) {\n        return \"все категории\";\n      }\n      \n      const labels = categories.map(c => c.toLowerCase());\n      if (labels.length === 1) return labels[0];\n      if (labels.length === 2) return `${labels[0]} и ${labels[1]}`;\n      if (labels.length > 2) return `${labels[0]}, ${labels[1]} +${labels.length - 2}`;\n      return \"\";\n    };\n    \n    return (\n      <Popover>\n        <PopoverTrigger asChild>\n          <Badge \n            variant=\"outline\" \n            className=\"cursor-pointer py-1 px-3 flex items-center gap-1.5 hover:bg-gray-100 transition-colors dropdown-badge\"\n          >\n            <span className=\"text-xs\">{getCatLabel()}</span>\n            <ChevronDown className=\"h-3 w-3\" />\n          </Badge>\n        </PopoverTrigger>\n        <PopoverContent className=\"w-auto p-2\">\n          <div className=\"flex flex-wrap gap-2\">\n            <Badge \n              key=\"all\" \n              variant={categories.length === availableCategories.length ? \"default\" : \"outline\"} \n              className=\"cursor-pointer\"\n              onClick={() => handleCategoriesChange(itemId, [...availableCategories])}\n            >\n              Все категории\n            </Badge>\n            \n            {availableCategories.map((cat) => (\n              <Badge \n                key={cat} \n                variant={categories.includes(cat) && categories.length !== availableCategories.length ? \"default\" : \"outline\"} \n                className=\"cursor-pointer\"\n                onClick={() => {\n                  if (categories.length === availableCategories.length) {\n                    handleCategoriesChange(itemId, [cat]);\n                  } else {\n                    let newSelected;\n                    if (categories.includes(cat)) {\n                      newSelected = categories.filter(c => c !== cat);\n                    } else {\n                      newSelected = [...categories, cat];\n                    }\n                    \n                    if (newSelected.length === 0) newSelected = [...availableCategories];\n                    handleCategoriesChange(itemId, newSelected);\n                  }\n                }}\n              >\n                {cat}\n              </Badge>\n            ))}\n          </div>\n        </PopoverContent>\n      </Popover>\n    );\n  };\n\n  // Добавляем обработку состояний загрузки\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <Progress value={30} className=\"w-[60%] mx-auto\" />\n          <p className=\"mt-4\">Загрузка данных...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (isError) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <h2 className=\"text-xl font-bold text-red-600\">Ошибка загрузки</h2>\n          <p className=\"mt-2\">Не удалось загрузить данные. Пожалуйста, обновите страницу.</p>\n          <Button onClick={() => window.location.reload()} className=\"mt-4\">\n            Обновить страницу\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-gray-100 font-sans pb-24 min-h-screen\">\n      {/* Top navigation */}\n      <nav className=\"max-w-6xl bg-[#434343] rounded-2xl flex items-center p-2 mx-auto mt-5 mb-10 relative\">\n        <span className=\"text-white text-sm font-medium px-3 py-2\">\n          Русский<span className=\"text-teal-400\">_100</span>\n        </span>\n\n        <div className=\"hidden lg:flex flex-wrap flex-1 items-center\">\n          <a\n            href=\"#\"\n            className=\"text-white text-sm font-medium bg-[#515151] rounded-xl px-4 py-2 mx-1 my-1 text-center hover:bg-[#616161]\"\n          >\n            Дашборд\n          </a>\n          <a\n            href=\"#\"\n            className=\"text-white text-sm font-medium bg-[#515151] rounded-xl px-4 py-2 mx-1 my-1 text-center hover:bg-[#616161]\"\n          >\n            Задания\n          </a>\n          <a\n            href=\"#\"\n            className=\"text-white text-sm font-medium bg-[#515151] rounded-xl px-4 py-2 mx-1 my-1 text-center hover:bg-[#616161]\"\n          >\n            Результаты\n          </a>\n        </div>\n\n        <div className=\"relative ml-auto mx-1 my-1\">\n          <div className=\"text-white text-sm font-medium bg-[#515151] rounded-xl px-3 py-2 text-center hover:bg-[#616161] cursor-pointer\">\n            <User className=\"inline-block w-5 h-5\" />\n          </div>\n        </div>\n      </nav>\n\n      {/* Main content */}\n      <div className=\"container max-w-6xl mx-auto p-3 sm:p-6\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <nav className=\"breadcrumbs text-sm text-gray-600 hidden sm:block\">\n            <a href=\"#\" className=\"hover:underline\">\n              Главная\n            </a>{\" \"}\n            &gt; <span>Генерация теста</span>\n          </nav>\n          <a href=\"#\" className=\"text-teal-600 hover:underline sm:hidden flex items-center\">\n            <ArrowLeft className=\"w-4 h-4 mr-1\" /> Назад\n          </a>\n          <a href=\"#\" className=\"text-teal-600 hover:underline text-sm sm:text-base\">\n            Мои тесты\n          </a>\n        </div>\n\n        {/* Test generation header */}\n        <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-800 flex items-center\">\n          <Edit2 className=\"mr-2 text-teal-600 w-6 h-6\" /> Генерация теста\n        </h1>\n        <p className=\"text-sm text-gray-600 mt-2 mb-6\">\n          Выберите задания для включения в тест (не более 50), укажите название, аккаунт и группу, затем нажмите\n          \"Создать тест\".\n        </p>\n\n        {/* Form */}\n        <div className=\"bg-white rounded-xl p-4 sm:p-6 shadow-sm mb-4 sm:mb-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"space-y-4\">\n              <div>\n                <label htmlFor=\"test-name\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Название теста <span className=\"text-red-500\">*</span>\n                </label>\n                <Input\n                  id=\"test-name\"\n                  value={testName}\n                  onChange={(e) => setTestName(e.target.value)}\n                  placeholder=\"Введите название теста\"\n                  className=\"w-full\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div>\n                <label htmlFor=\"test-group\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Группа тестов\n                </label>\n                <div className=\"flex items-center gap-2\">\n                  <Select value={testGroup} onValueChange={setTestGroup}>\n                    <SelectTrigger className=\"w-full\">\n                      <SelectValue placeholder=\"-- Выберите --\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"3\">Тесты-25</SelectItem>\n                      <SelectItem value=\"4\">Пунктуация</SelectItem>\n                      <SelectItem value=\"5\">Пунктуация. Контроль.</SelectItem>\n                      <SelectItem value=\"6\">Чекапы</SelectItem>\n                      <SelectItem value=\"7\">Сочинение</SelectItem>\n                      <SelectItem value=\"8\">Сочинение. Контроль.</SelectItem>\n                      <SelectItem value=\"9\">Грамматика</SelectItem>\n                      <SelectItem value=\"10\">Грамматика контроль</SelectItem>\n                      <SelectItem value=\"29\">Сгенерированные тесты</SelectItem>\n                      <SelectItem value=\"60\">ЕГКР (от ФИПИ)</SelectItem>\n                      <SelectItem value=\"127\">Орфография</SelectItem>\n                      <SelectItem value=\"128\">Орфография. Контроль</SelectItem>\n                      <SelectItem value=\"255\">Орфография (тексты с пропущенными буквами)</SelectItem>\n                      <SelectItem value=\"333\">Речь</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <Button variant=\"outline\" size=\"icon\" className=\"flex-shrink-0\">\n                    <FolderPlus className=\"h-5 w-5 text-teal-600\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div>\n                <label htmlFor=\"account-select\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Аккаунт\n                </label>\n                <Select value={account} onValueChange={setAccount}>\n                  <SelectTrigger className=\"w-full\">\n                    <SelectValue placeholder=\"-- Выберите аккаунт --\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"1\">Аккаунт 1</SelectItem>\n                    <SelectItem value=\"2\">Аккаунт 2</SelectItem>\n                    <SelectItem value=\"3\">Аккаунт 3</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </div>\n\n          {/* --- УДАЛЕНА ВСТАВКА ГЛОБАЛЬНЫХ ЧИПОВ --- */}\n          {/* <div className=\"mb-6\"> {renderDifficultyChips()} </div> */}\n\n        </div>\n\n        {/* Selectable Exam Text */}\n        <div className=\"mb-4\">\n          <SelectableExamText />\n        </div>\n\n        {/* Tabs */}\n        <Tabs \n          defaultValue=\"tasks\" \n          value={selectedTab} \n          onValueChange={setSelectedTab} \n          className=\"w-full max-w-full flex flex-col\"\n        >\n          <div className=\"border-b border-gray-200 sticky top-0 z-30 bg-white shadow-sm overflow-hidden rounded-t-xl\">\n            <TabsList className=\"grid w-full grid-cols-3 bg-transparent shadow-none border-0 h-auto p-0 m-0\">\n              <TabsTrigger\n                value=\"tasks\"\n                className=\"py-3 px-4 text-gray-500 data-[state=active]:bg-teal-600 data-[state=active]:text-white data-[state=active]:shadow-md rounded-none hover:text-gray-700 transition-colors\"\n              >\n                По заданиям\n              </TabsTrigger>\n              <TabsTrigger\n                value=\"ege\"\n                className=\"py-3 px-4 text-gray-500 data-[state=active]:bg-teal-600 data-[state=active]:text-white data-[state=active]:shadow-md rounded-none hover:text-gray-700 transition-colors\"\n              >\n                Формат ЕГЭ\n              </TabsTrigger>\n              <TabsTrigger\n                value=\"exercises\"\n                className=\"py-3 px-4 text-gray-500 data-[state=active]:bg-teal-600 data-[state=active]:text-white data-[state=active]:shadow-md rounded-none hover:text-gray-700 transition-colors\"\n              >\n                Упражнения\n              </TabsTrigger>\n            </TabsList>\n          </div>\n\n          {/* Общий контейнер для всех вкладок с единым отступом */}\n          <div className=\"pt-6\">\n            {/* Восстановленное содержимое вкладок */}\n            <TabsContent value=\"tasks\" className=\"w-full max-w-full mt-0\">\n              <div className=\"bg-white rounded-xl p-4 sm:p-6 shadow-sm overflow-hidden\">\n                <h2 className=\"text-xl font-semibold text-gray-800 mb-4\">Генерация по заданиям</h2>\n                <p className=\"text-sm text-gray-600 mb-6\">\n                  Выберите количество вопросов и уровень сложности для каждого задания:\n                </p>\n                {tasksDataState?.map((category: TestCategory) => {\n                  if (!category) return null;\n                  return (\n                  <div key={category.category} className=\"mb-6\">\n                    <div\n                      className=\"flex items-center justify-between bg-gray-50 p-2 sm:p-3 rounded-lg cursor-pointer\"\n                      onClick={() => toggleCategory(category.category)}\n                    >\n                      <h3 className=\"font-medium text-gray-800\">{category.category}</h3>\n                      {expandedCategories[category.category] ? (\n                        <ChevronUp className=\"w-5 h-5 text-gray-500\" />\n                      ) : (\n                        <ChevronDown className=\"w-5 h-5 text-gray-500\" />\n                      )}\n                    </div>\n                    {expandedCategories[category.category] && (\n                      <div className=\"mt-2 sm:mt-3 space-y-2 sm:space-y-3\">\n                          {category.items?.map((item: TestItem) => {\n                            if (!item) return null;\n                            return renderItemRow(item, category, \"tasks\");\n                          })}\n                      </div>\n                    )}\n                  </div>\n                  );\n                })}\n              </div>\n            </TabsContent>\n            <TabsContent value=\"ege\" className=\"w-full max-w-full mt-0\">\n              <div className=\"bg-white rounded-xl p-4 sm:p-6 shadow-sm overflow-hidden\">\n                <h2 className=\"text-xl font-semibold text-gray-800 mb-4\">Формат ЕГЭ</h2>\n                <p className=\"text-sm text-gray-600 mb-6\">Выберите параметры для генерации теста в формате ЕГЭ:</p>\n                {egeFormatDataState?.map((section: EGESection) => {\n                  if (!section) return null;\n                  return (\n                  <div key={section.title} className=\"mb-5 sm:mb-8\">\n                    <h3 className=\"text-lg font-medium text-gray-800 mb-4\">{section.title}</h3>\n                      {section.categories?.map((category: EGECategory) => {\n                        if (!category) return null;\n                        return (\n                      <div key={`${section.title}-${category.title}`} className=\"mb-6\">\n                        <div\n                          className=\"flex items-center justify-between bg-gray-50 p-2 sm:p-3 rounded-lg cursor-pointer\"\n                          onClick={() => toggleCategory(`${section.title}-${category.title}`)}\n                        >\n                          <h4 className=\"font-medium text-gray-800\">{category.title}</h4>\n                          {expandedCategories[`${section.title}-${category.title}`] ? (\n                            <ChevronUp className=\"w-5 h-5 text-gray-500\" />\n                          ) : (\n                            <ChevronDown className=\"w-5 h-5 text-gray-500\" />\n                          )}\n                        </div>\n                        {expandedCategories[`${section.title}-${category.title}`] && (\n                          <div className=\"mt-2 sm:mt-3 space-y-2 sm:space-y-3\">\n                                {category.items?.map((item: TestItem) => {\n                                  if (!item) return null;\n                                  return renderItemRow(item, category, \"ege\");\n                                })}\n                                        </div>\n                                      )}\n                          </div>\n                        );\n                      })}\n                      </div>\n                  );\n                })}\n              </div>\n            </TabsContent>\n            <TabsContent value=\"exercises\" className=\"w-full max-w-full mt-0\">\n              <div className=\"bg-white rounded-xl p-4 sm:p-6 shadow-sm overflow-hidden\">\n                <h2 className=\"text-xl font-semibold text-gray-800 mb-4\">Упражнения</h2>\n                <p className=\"text-sm text-gray-600 mb-6\">Выберите упражнения для включения в тест:</p>\n                {exercisesDataState?.map((section: EGESection) => {\n                  if (!section) return null;\n                  return (\n                  <div key={section.title} className=\"mb-5 sm:mb-8\">\n                    <h3 className=\"text-lg font-medium text-gray-800 mb-4\">{section.title}</h3>\n                      {section.categories?.map((category: EGECategory) => {\n                        if (!category) return null;\n                        return (\n                      <div key={`${section.title}-${category.title}`} className=\"mb-6\">\n                        <div\n                          className=\"flex items-center justify-between bg-gray-50 p-2 sm:p-3 rounded-lg cursor-pointer\"\n                          onClick={() => toggleCategory(`${section.title}-${category.title}`)}\n                        >\n                          <h4 className=\"font-medium text-gray-800\">{category.title}</h4>\n                          {expandedCategories[`${section.title}-${category.title}`] ? (\n                            <ChevronUp className=\"w-5 h-5 text-gray-500\" />\n                          ) : (\n                            <ChevronDown className=\"w-5 h-5 text-gray-500\" />\n                          )}\n                        </div>\n                        {expandedCategories[`${section.title}-${category.title}`] && (\n                          <div className=\"mt-2 sm:mt-3 space-y-2 sm:space-y-3\">\n                                {category.items?.map((item: TestItem) => {\n                                  if (!item) return null;\n                                  return renderItemRow(item, category, \"exercises\");\n                                })}\n                                        </div>\n                                      )}\n                          </div>\n                        );\n                      })}\n                      </div>\n                  );\n                })}\n              </div>\n            </TabsContent>\n          </div>\n        </Tabs>\n      </div>\n      {/* Fixed bottom panel */}\n      <div className=\"fixed bottom-0 left-0 right-0 bg-white shadow-lg border-t border-gray-200 py-3 px-4 z-50\">\n        <div className=\"container max-w-6xl mx-auto\">\n          <div className=\"flex flex-col sm:flex-row items-center justify-between gap-4\">\n            <div className=\"flex items-center gap-3 w-full sm:w-auto\">\n              <span className=\"text-sm font-medium text-gray-700\">Выбрано заданий:</span>\n              <span className=\"text-lg font-bold text-teal-600\">\n                {totalSelected} / {totalLimit}\n              </span>\n            </div>\n\n            <div className=\"w-full sm:w-1/3 flex-grow\">\n              <Progress value={progress} className=\"h-2\" />\n            </div>\n\n            <Button\n              className=\"w-full sm:w-auto bg-teal-600 hover:bg-teal-700 text-white px-8 font-medium\"\n              variant=\"default\"\n              disabled={!testName}\n              style={{ opacity: 1 }}\n            >\n              {buttonText}\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n"],"names":["ArrowLeft","createLucideIcon","Pen","difficultyStatsData","difficultyTiers","TestGenerator","testName","setTestName","useState","testGroup","setTestGroup","account","setAccount","tasksDataState","setTasksDataState","egeFormatDataState","setEgeFormatDataState","exercisesDataState","setExercisesDataState","itemDifficulties","setItemDifficulties","expandedCategories","setExpandedCategories","selectedTab","setSelectedTab","newGroup","setNewGroup","buttonText","setButtonText","totalLimit","totalSelected","setTotalSelected","progress","tasksSelected","setTasksSelected","egeSelected","setEgeSelected","exercisesSelected","setExercisesSelected","isLoading","setIsLoading","isError","setIsError","itemCategories","setItemCategories","useEffect","tasksData","egeFormatData","exercisesData","prev","error","updateButtonText","selectedTabs","handleCountChange","id","categoryIdentifier","increment","tabType","updatedData","categoryData","item","oldCount","newCount","hasSelectedItems","cat","found","section","sec","i","handleItemDifficultyChange","itemId","difficultyId","currentDifficulties","newDifficulties","d","toggleCategory","category","handleCategoriesChange","categories","renderItemRow","currentCount","maxCount","statsId","itemStats","hasCategories","_a","availableCategories","interactiveBlock","difficultyDropdown","createDifficultyDropdown","categoryDropdown","createCategoryDropdown","TaskCardBlock","cats","difficulties","getDiffLabel","labels","v","tier","t","totalCount","sum","count","Popover","PopoverTrigger","Badge","ChevronDown","PopoverContent","countForItemTier","getCatLabel","c","newSelected","Progress","Button","User","Edit2","Input","e","Select","SelectTrigger","SelectValue","SelectContent","SelectItem","FolderPlus","_jsx","SelectableExamText","Tabs","TabsList","TabsTrigger","TabsContent","ChevronUp"],"mappings":"myBAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GASA,MAAMA,GAAYC,GAAiB,YAAa,CAC9C,CAAC,OAAQ,CAAE,EAAG,iBAAkB,IAAK,QAAQ,CAAE,EAC/C,CAAC,OAAQ,CAAE,EAAG,WAAY,IAAK,QAAU,CAAA,CAC3C,CAAC,ECZD;AAAA;AAAA;AAAA;AAAA;AAAA,GASA,MAAMC,GAAMD,GAAiB,MAAO,CAClC,CACE,OACA,CACE,EAAG,mIACH,IAAK,QACX,CACA,CACA,CAAC,ECCYE,GAAsB,CAEjC,UAAY,CAAE,QAAS,EAAG,KAAM,EAAG,OAAQ,GAAI,KAAM,EAAG,QAAS,CAAE,EACnE,UAAY,CAAE,QAAS,EAAG,KAAM,EAAG,OAAQ,GAAI,KAAM,EAAG,QAAS,CAAE,EACnE,UAAY,CAAE,QAAS,EAAG,KAAM,EAAG,OAAQ,EAAI,KAAM,GAAI,QAAS,CAAE,EACpE,WAAY,CAAE,QAAS,EAAG,KAAM,EAAG,OAAQ,EAAI,KAAM,EAAG,QAAS,CAAE,EACnE,UAAY,CAAE,QAAS,EAAG,KAAM,GAAI,OAAQ,GAAI,KAAM,EAAG,QAAS,CAAE,EACpE,UAAY,CAAE,QAAS,EAAG,KAAM,GAAI,OAAQ,GAAI,KAAM,EAAG,QAAS,CAAE,EACpE,UAAY,CAAE,QAAS,EAAG,KAAM,EAAG,OAAQ,GAAI,KAAM,EAAG,QAAS,CAAE,EACnE,UAAY,CAAE,QAAS,EAAG,KAAM,EAAG,OAAQ,GAAI,KAAM,EAAG,QAAS,CAAE,EACnE,UAAY,CAAE,QAAS,EAAG,KAAM,EAAG,OAAQ,EAAI,KAAM,GAAI,QAAS,CAAE,EACpE,UAAY,CAAE,QAAS,EAAG,KAAM,EAAG,OAAQ,GAAI,KAAM,EAAG,QAAS,CAAE,EACnE,WAAY,CAAE,QAAS,EAAG,KAAM,EAAG,OAAQ,GAAI,KAAM,EAAG,QAAS,CAAE,EACnE,WAAY,CAAE,QAAS,EAAG,KAAM,EAAG,OAAQ,GAAI,KAAM,EAAG,QAAS,CAAE,EACnE,WAAY,CAAE,QAAS,EAAG,KAAM,EAAG,OAAQ,EAAI,KAAM,GAAI,QAAS,CAAE,EACpE,WAAY,CAAE,QAAS,EAAG,KAAM,EAAG,OAAQ,GAAI,KAAM,EAAG,QAAS,CAAE,EACnE,WAAY,CAAE,QAAS,EAAG,KAAM,EAAG,OAAQ,GAAI,KAAM,EAAG,QAAS,CAAE,EACnE,WAAY,CAAE,QAAS,EAAG,KAAM,EAAG,OAAQ,GAAI,KAAM,EAAG,QAAS,CAAE,EACnE,WAAY,CAAE,QAAS,EAAG,KAAM,EAAG,OAAQ,GAAI,KAAM,EAAG,QAAS,CAAE,EACnE,WAAY,CAAE,QAAS,EAAG,KAAM,EAAG,OAAQ,GAAI,KAAM,EAAG,QAAS,CAAE,EACnE,WAAY,CAAE,QAAS,EAAG,KAAM,EAAG,OAAQ,EAAI,KAAM,GAAI,QAAS,CAAE,EACpE,WAAY,CAAE,QAAS,EAAG,KAAM,EAAG,OAAQ,GAAI,KAAM,EAAG,QAAS,CAAE,EACnE,WAAY,CAAE,QAAS,EAAG,KAAM,EAAG,OAAQ,EAAI,KAAM,GAAI,QAAS,CAAE,EACpE,WAAY,CAAE,QAAS,EAAG,KAAM,EAAG,OAAQ,GAAI,KAAM,EAAG,QAAS,CAAE,EACnE,WAAY,CAAE,QAAS,EAAG,KAAM,EAAG,OAAQ,GAAI,KAAM,EAAG,QAAS,CAAE,EACnE,WAAY,CAAE,QAAS,EAAG,KAAM,EAAG,OAAQ,GAAI,KAAM,EAAG,QAAS,CAAE,EACnE,WAAY,CAAE,QAAS,EAAG,KAAM,EAAG,OAAQ,EAAI,KAAM,GAAI,QAAS,CAAE,EACpE,WAAY,CAAE,QAAS,EAAG,KAAM,EAAG,OAAQ,GAAI,KAAM,EAAG,QAAS,CAAE,EAGnE,UAAW,CAAE,QAAS,EAAG,KAAM,GAAI,OAAQ,EAAG,KAAM,EAAG,QAAS,CAAE,EAElE,WAAY,CAAE,QAAS,GAAI,KAAM,GAAI,OAAQ,EAAG,KAAM,EAAG,QAAS,CAAA,CACpE,ECMMC,EAAkB,CACtB,CAAE,GAAI,UAAW,MAAO,cAAe,EACvC,CAAE,GAAI,OAAQ,MAAO,QAAS,EAC9B,CAAE,GAAI,SAAU,MAAO,SAAU,EACjC,CAAE,GAAI,OAAQ,MAAO,SAAU,EAC/B,CAAE,GAAI,UAAW,MAAO,eAAA,CAEzB,EAsBD,SAAwBC,IAAgB,CAEtC,KAAM,CAACC,EAAUC,EAAW,EAAIC,EAAAA,SAAS,EAAE,EACrC,CAACC,GAAWC,EAAY,EAAIF,EAAAA,SAA6B,MAAS,EAClE,CAACG,GAASC,EAAU,EAAIJ,EAAAA,SAAS,MAAS,EAC1C,CAACK,EAAgBC,CAAiB,EAAIN,EAAAA,SAAgC,IAAnB,EACnD,CAACO,EAAoBC,CAAqB,EAAIR,EAAAA,SAA8B,IAAI,EAChF,CAACS,EAAoBC,CAAqB,EAAIV,EAAAA,SAA8B,IAAjB,EAC3D,CAACW,EAAkBC,EAAmB,EAAIZ,EAAAA,SAA2B,CAAA,CAAE,EACvE,CAACa,EAAoBC,CAAqB,EAAId,EAAAA,SAAkC,CAAA,CAAE,EAClF,CAACe,GAAaC,EAAc,EAAIhB,EAAAA,SAAS,OAAO,EAChD,CAACiB,GAAUC,EAAW,EAAIlB,EAAAA,SAAS,EAAE,EACrC,CAACmB,GAAYC,CAAa,EAAIpB,EAAAA,SAAS,cAAc,EAErDqB,EAAa,GACb,CAACC,EAAeC,CAAgB,EAAIvB,EAAAA,SAAS,CAAC,EAC9CwB,GAAYF,EAAgBD,EAAa,IAEzC,CAACI,EAAeC,EAAgB,EAAI1B,EAAAA,SAAS,EAAK,EAClD,CAAC2B,EAAaC,EAAc,EAAI5B,EAAAA,SAAS,EAAK,EAC9C,CAAC6B,EAAmBC,EAAoB,EAAI9B,EAAAA,SAAS,EAAK,EAG1D,CAAC+B,GAAWC,CAAY,EAAIhC,EAAAA,SAAS,EAAI,EACzC,CAACiC,GAASC,EAAU,EAAIlC,EAAAA,SAAS,EAAK,EAGtC,CAACmC,EAAgBC,EAAiB,EAAIpC,EAAAA,SAAS,CAAA,CAAE,EAGvDqC,EAAAA,UAAU,IAAI,CACR,GAAA,CAEF,GAAI,CAACC,GAAa,CAACC,IAAiB,CAACC,GAC7B,MAAA,IAAI,MAAM,iBAAiB,EAInClC,EAAkBgC,CAAS,EAC3B9B,EAAsB+B,EAAa,EACnC7B,EAAsB8B,EAAa,EAG/BF,EAAU,OAAS,GACrBxB,EAAuB2B,IAAQ,CAAE,GAAGA,EAAM,CAACH,EAAU,CAAC,EAAE,QAAQ,EAAG,EAAA,EAAM,EAG3EN,EAAa,EAAK,QACXU,EAAO,CACN,QAAA,MAAM,2BAA4BA,CAAK,EAC/CR,GAAW,EAAI,EACfF,EAAa,EAAK,CAAA,CAEtB,EAAG,EAAE,EAELK,EAAAA,UAAU,IAAI,CACKM,GAAA,CAAA,EAChB,CAAClB,EAAeE,EAAaE,CAAA,CAAkB,EAElD,MAAMc,GAAmB,IAAI,CAC3B,MAAMC,EAAe,CAAC,EAClBnB,GAA4BmB,EAAA,KAAK,aAAa,EAC9CjB,GAA0BiB,EAAA,KAAK,KAAK,EACpCf,GAAgCe,EAAA,KAAK,YAAY,EAEjDA,EAAa,SAAW,EAC1BxB,EAAc,cAAc,EACnBwB,EAAa,SAAW,EACjCxB,EAAc,gBAAgBwB,EAAa,CAAC,CAAC,EAAE,EACtCA,EAAa,SAAW,EACnBxB,EAAA,gBAAgBwB,EAAa,CAAC,CAAC,MAAMA,EAAa,CAAC,CAAC,EAAE,EAEpExB,EAAc,gBAAgBwB,EAAa,CAAC,CAAC,KAAKA,EAAa,CAAC,CAAC,MAAMA,EAAa,CAAC,CAAC,EAAE,CAE5F,EAGMC,EAAoB,CACxBC,EACAC,EACAC,EAD+BC,KAI3B,IAAAC,EACJ,GAAID,IAAY,QAAS,CACvBC,EAAc,KAAK,MAAM,KAAK,UAAU7C,CAAc,CAAC,EAEvD,UAAW8C,KAAgBD,EAAY,CAE/B,MAAAE,EAAOD,EAAmC,MAAhB,KAA4BC,GAAOA,EAAK,KAAmBN,CAAE,EAC7F,GAAIM,EAAM,CACF,MAAAC,EAAWD,EAAK,OAAS,EACzBE,EAAW,KAAK,IACpB,EACA,KAAK,IAAIF,EAAK,UAAY,GAAIC,EAAWL,CAAS,CAAA,EAEpDI,EAAK,MAAQE,EAGb/B,EAAkBkB,GAChB,KAAK,IAAI,EAAG,KAAK,IAAIpB,EAAYoB,GAAQa,EAAWD,EAAQ,CAAC,CAAC,EAIhE,MAAME,EAAmBL,EAAY,KAAMM,GAAMA,EAAI,MACzC,KAAMJ,GAAmBA,EAAK,OAASA,EAAK,MAAQ,CAAC,CAAA,EAEjE1B,GAAiB6B,CAAgB,EACjCjD,EAAkB4C,CAAW,EAC7B,KAAA,CACF,CAEO,SAAAD,IAAY,OAASA,IAAY,YAAa,CAEvDC,EAAc,KAAK,MAAM,KAAK,UADTD,IAAY,MAAQ1C,EAAqBE,CACV,CAAC,EACrD,IAAIgD,EAAQ,GACZ,UAAWC,KAAWR,EAAY,CACrB,UAAAC,KAAgBO,EAAQ,WAAW,CACtC,MAAAN,EAA6BD,EAAT,MAA4B,KAAMC,GAAmBA,EAAK,KAAON,CAAE,EAC7F,GAAIM,EAAM,CACF,MAAAC,EAAWD,EAAK,OAAS,EACzBE,EAAW,KAAK,IACpB,EACA,KAAK,IAAIF,EAAK,UAAY,GAAIC,EAAWL,CAAS,CAAA,EAEpDI,EAAK,MAAQE,EACb/B,EAAkBkB,GAAO,KAAO,IAAI,EAAG,KAAK,IAAIpB,EAAYoB,GAAQa,EAAWD,EAAQ,CAAC,CAAC,EAEnF,MAAAE,EAAmBL,EAAY,KAAMS,GAAMA,EAC3C,WAAW,KAAMH,GACnBA,EAAI,MAD+B,KACnBI,GAAIA,EAAc,OAASA,EAAE,MAAQ,CAAC,CAAA,CAAA,EAGtDX,IAAY,MAAOrB,GAAe2B,CAAgB,KAC5BA,CAAgB,EAEtCN,IAAY,MAAOzC,EAAsB0C,CAAW,IAC7BA,CAAW,EAC9BO,EAAA,GACR,KAAA,CACF,CAEF,GAAIA,EAAO,KAAA,CACb,CAEJ,EAGMI,EAA6B,CAACC,EAAyBC,IAAF,CACzDnD,GAAqB6B,GAAO,CAC1B,MAAMuB,EAAsBvB,EAAKqB,CAAM,GAAK,CAAC,EAG7C,GAAIC,IAAiB,MACZ,MAAA,CACL,GAAGtB,EACH,CAACqB,CAAM,EAAG,CAAC,KAAA,CACb,EAIE,IAAAG,EACA,OAAAD,EAAoB,SAASD,CAAY,GAE3CE,EAAkBD,EAAoB,OAAOE,GAAIA,IAAOH,CAAY,EAEhEE,EAAgB,SAAW,IACXA,EAAA,CAAC,KAAM,IAITA,EAAAD,EACf,OAAOE,GAAIA,IAAO,KAAK,EACvB,OAAOH,CAAY,EAGjB,CACL,GAAGtB,EACH,CAACqB,CAAM,EAAGG,CACZ,CAAA,CACD,CACH,EAEME,EAAkBC,GAAW,CACjCtD,EAAuB2B,IAAQ,CAC7B,GAAGA,EACH,CAAC2B,CAAQ,EAAG,CAAC3B,EAAK2B,CAAQ,CAAA,EAC3B,CACH,EAGMC,EAAyB,CAACP,EAAyBQ,IAAa,CAClDlC,GAAA,CAAE,GAAGD,EAAgB,CAAC2B,CAAM,EAAGQ,CAAA,CAAY,CAC/D,EAGMC,EAAgB,CAACnB,EAAgBgB,EAAUnB,IAAU,OACnD,MAAAuB,EAAepB,EAAK,OAAS,EAC7BqB,EAAWrB,EAAK,UAAY,GAC5BL,EAAqB,aAAcqB,EAAWA,EAAS,SAAWA,EAAS,MAC3EM,EAAU,GAAGzB,CAAO,IAAIG,EAAK,EAAE,GAC/BuB,EAAYhF,GAAoB+E,CAAO,GAAK,KAI5CE,EAAgB,CAAC,GADJC,EAAAzB,EAAK,MAAM,MAAM,WAAW,IAA5B,YAAAyB,EAAgC,IAE7CC,EAAsBF,EACxB,CAAC,aAAc,aAAc,UAAW,YAAA,EACxC,CAAC,EAGL,IAAIG,EAAmB,KAEvB,GAAIH,GAAiBD,EAAW,CAExB,MAAAK,EAAqBC,EAAyB7B,EAAMuB,CAAS,EAC7DO,EAAmBC,GAAuB/B,EAAM0B,CAAmB,EAEzEC,SACG,MAAG,CAAC,MAAO,CAAE,QAAS,OAAQ,IAAK,GAAI,WAAY,SAAU,SAAU,MAAO,EAAG,UAAU,iCACzFG,EACAF,CAAA,YAGI,CAACJ,GAAiBD,EAAW,CAEhC,MAAAK,EAAqBC,EAAyB7B,EAAMuB,CAAS,EAEnEI,QACG,MAAG,CAAC,MAAO,CAAE,QAAS,OAAQ,IAAK,GAAI,WAAY,SAAU,SAAU,MAAO,EAAG,UAAU,uBACzF,SAAAC,CAAA,GAMP,aACGI,GAAY,CAEX,KAAM,CAAC,GAAGhC,EAAM,MAAOwB,EAAgBxB,EAAK,MAAQA,EAAK,MAAM,QAAQ,eAAgB,EAAE,CAAC,EAC1F,SAAU,KACV,aAAAoB,EACA,SAAAC,EACA,YAAa,IAAI5B,EAAoBO,EAAK,GAAIL,EAAoB,GAAIE,CAAO,EAC7E,YAAa,IAAMJ,EAAkBO,EAAK,GAAIL,EAAoB,EAAGE,CAAO,EAC5E,aAActC,EAAiByC,EAAK,EAAE,GAAK,CAAC,KAAM,EAClD,mBAAqBN,GAAee,EAA2BT,EAAK,GAAIN,CAAE,EAC1E,WAAYX,EAAeiB,EAAK,EAAE,GAAK0B,EACvC,mBAAqBO,GAAOhB,EAAmCjB,EAAK,GAAIiC,CAAI,EAC5E,UAAAV,EACA,gBAAA/E,EACA,mBAAoBmF,EACpB,iBAAkB,IAAA,EAdb3B,EAAK,EAAE,CAiBlB,EAGM6B,EAA2B,CAAC7B,EAAgBuB,IAAY,CAC7CvB,EAAK,GAEpB,MAAMkC,EAAe3E,EAAiByC,EAAK,EAAE,GAAK,CAAC,KAAM,EAGnDmC,EAAe,IAAI,CACvB,GAAI,CAACD,GAAgBA,EAAa,SAAS,KAAK,EACvC,MAAA,kBAGT,MAAME,EAASF,EAAa,IAAKG,GAAI,CACnC,MAAMC,EAAO9F,EAAgB,KAAK+F,GAAKA,EAAE,KAAOF,CAAC,EACjD,OAAOC,EAAOA,EAAK,MAAM,YAAY,EAAID,EAAE,YAAY,CAAA,CACxD,EAED,OAAID,EAAO,SAAW,EAAUA,EAAO,CAAC,EACpCA,EAAO,SAAW,EAAU,GAAGA,EAAO,CAAC,CAAC,MAAMA,EAAO,CAAC,CAAC,GACvDA,EAAO,OAAS,EAAU,GAAGA,EAAO,CAAC,CAAC,KAAKA,EAAO,CAAC,CAAC,KAAKA,EAAO,OAAS,CAAC,GACvE,EACT,EAGMI,EAAa,OAAO,OAAOjB,GAAa,CAAA,CAAE,EAAE,OAAO,CAACkB,EAAKC,IAAQ,OAC9DD,CAAG,EAAI,OAAOC,CAAK,EAAG,CAAC,EAEhC,cACGC,GAAO,iBACLC,GAAc,CAAC,QAAO,GACrB,gBAACC,EAAK,CACJ,QAAQ,UACR,UAAU,wHAET,OAAI,CAAC,UAAU,UAAW,SAAAV,EAAa,CAAA,SACvCW,EAAW,CAAC,UAAU,uBAG1BC,GAAc,CAAC,UAAU,6BACvB,MAAG,CAAC,UAAU,wCACZF,EAAK,CAEJ,QAAS,CAAEX,GAAgBA,EAAa,SAAS,KAAK,EAAI,UAAa,UACvE,UAAU,iBACV,QAAS,IAAIzB,EAA6BT,EAAK,GAAI,KAAK,YAC1D,yBACmB,OAAI,CAAC,UAAU,OAAQ,SAAAwC,MALpC,KAAK,EAQVhG,EAAgB,IAAK8F,GAAO,CAC3B,MAAMU,EAAmBzB,EAAUe,EAAK,EAAE,GAAK,EAC/C,cACGO,EAAK,CAEJ,QAASX,EAAa,SAASI,EAAK,EAAE,GAAK,CAACJ,EAAa,SAAS,KAAK,EAAI,UAAY,UACvF,UAAU,iBACV,QAAS,IAAMzB,EAA2BT,EAAK,GAAIsC,EAAK,EAAE,YAEzDA,EAAK,MAAM,YAAY,EAAE,UAAE,OAAI,CAAC,UAAU,gBAAQU,MAL9CV,EAAK,EAAE,CAQjB,CAAA,CAAA,QAKX,EAEMP,GAAyB,CAAC/B,EAAM0B,IAAgC,CACpE,MAAMhB,EAASV,EAAK,GACdkB,EAAanC,EAAeiB,EAAK,EAAE,GAAK0B,EAGxCuB,EAAc,IAAI,CAClB,GAAA/B,EAAW,SAAWQ,EAAoB,OACrC,MAAA,gBAGT,MAAMU,EAASlB,EAAW,IAAIgC,GAAIA,EAAG,aAAa,EAClD,OAAId,EAAO,SAAW,EAAUA,EAAO,CAAC,EACpCA,EAAO,SAAW,EAAU,GAAGA,EAAO,CAAC,CAAC,MAAMA,EAAO,CAAC,CAAC,GACvDA,EAAO,OAAS,EAAU,GAAGA,EAAO,CAAC,CAAC,KAAKA,EAAO,CAAC,CAAC,KAAKA,EAAO,OAAS,CAAC,GACvE,EACT,EAEA,cACGO,GAAO,iBACLC,GAAc,CAAC,QAAO,GACrB,gBAACC,EAAK,CACJ,QAAQ,UACR,UAAU,wHAET,OAAI,CAAC,UAAU,UAAW,SAAAI,EAAY,CAAA,SACtCH,EAAW,CAAC,UAAU,uBAG1BC,GAAc,CAAC,UAAU,6BACvB,MAAG,CAAC,UAAU,uCACZF,EAAK,CAEJ,QAAS3B,EAAW,SAAWQ,EAAoB,OAAS,UAAY,UACxE,UAAU,iBACV,QAAS,IAAMT,EAAuBP,EAAQ,CAAI,GAAAgB,CAAA,CAAoB,EACxE,SAAA,iBAJM,KAAK,EAQVA,EAAoB,IAAKtB,SACvByC,EAAK,CAEJ,QAAS3B,EAAW,SAASd,CAAG,GAAKc,EAAW,SAAWQ,EAAoB,OAAS,UAAY,UACpG,UAAU,iBACV,QAAS,IAAI,CACP,GAAAR,EAAW,SAAWQ,EAAoB,OAC5CT,EAAuBP,EAAQ,CAACN,CAAA,CAAI,MAC/B,CACD,IAAA+C,EACAjC,EAAW,SAASd,CAAG,EACzB+C,EAAcjC,EAAW,OAAO,GAAK,IAAMd,CAAG,EAEhC+C,EAAA,IAAIjC,EAAYd,CAAI,EAGhC+C,EAAY,SAAW,IAAiBA,EAAA,CAAI,GAAAzB,CAAoB,GACpET,EAAuBP,EAAQyC,CAAW,CAAA,CAE9C,EAEC,SAAA/C,GAnBIA,CAAG,CAAC,CAAA,QA0BvB,EAGA,OAAIzB,SAEC,MAAG,CAAC,UAAU,gEACZ,MAAG,CAAC,UAAU,8BACZyE,GAAQ,CAAC,MAAO,GAAI,UAAU,iBAAA,SAC9B,IAAC,CAAC,UAAU,OAAO,SAAA,4BAMxBvE,SAEC,MAAG,CAAC,UAAU,gEACZ,MAAG,CAAC,UAAU,8BACZ,KAAE,CAAC,UAAU,iCAAiC,SAAA,iBAAA,SAC9C,IAAC,CAAC,UAAU,OAAO,SAAA,6DAAA,SACnBwE,EAAM,CAAC,QAAS,IAAM,OAAO,SAAS,OAAO,EAAG,UAAU,OAAM,SAAA,kCAStE,MAAG,CAAC,UAAU,4DAEZ,MAAG,CAAC,UAAU,wGACZ,OAAI,CAAC,UAAU,qDAA0C,gBAChD,OAAI,CAAC,UAAU,yBAAgB,mBAGxC,MAAG,CAAC,UAAU,+DACZ,IAAA,CACC,KAAK,IACL,UAAU,4GACZ,SAAA,SAAA,SAGC,IAAA,CACC,KAAK,IACL,UAAU,4GACZ,SAAA,SAAA,SAGC,IAAA,CACC,KAAK,IACL,UAAU,4GACZ,SAAA,wBAKD,MAAG,CAAC,UAAU,4CACZ,MAAG,CAAC,UAAU,gIACZC,GAAI,CAAC,UAAU,uCAMrB,MAAG,CAAC,UAAU,0DACZ,MAAG,CAAC,UAAU,0DACZ,MAAG,CAAC,UAAU,oEACZ,IAAC,CAAC,KAAK,IAAI,UAAU,kBAAiB,SAAA,SAAA,GAElC,IAAG,WACF,OAAI,CAAC,SAAA,8BAEZ,IAAC,CAAC,KAAK,IAAI,UAAU,4EACnBlH,GAAS,CAAC,UAAU,cAAA,GAAiB,QAAA,UAEvC,IAAC,CAAC,KAAK,IAAI,UAAU,qDAAoD,SAAA,wBAM3E,KAAE,CAAC,UAAU,iFACXmH,GAAK,CAAC,UAAU,4BAAA,GAA+B,kBAAA,UAEjD,IAAC,CAAC,UAAU,kCAAiC,SAAA,wHAAA,SAM7C,MAAG,CAAC,UAAU,wEACZ,MAAG,CAAC,UAAU,wDACZ,MAAG,CAAC,UAAU,4BACZ,MAAG,kBACD,QAAK,CAAC,QAAQ,YAAY,UAAU,yDAA8C,wBACjE,OAAI,CAAC,UAAU,eAAe,SAAA,eAE/CC,GAAI,CACH,GAAG,YACH,MAAO9G,EACP,SAAW+G,GAAM9G,GAAY8G,EAAE,OAAO,KAAK,EAC3C,YAAY,yBACZ,UAAU,sBAKf,MAAG,CAAC,UAAU,4BACZ,MAAG,iBACD,QAAK,CAAC,QAAQ,aAAa,UAAU,+CAA8C,SAAA,eAAA,UAGnF,MAAG,CAAC,UAAU,2CACZC,EAAM,CAAC,MAAO7G,GAAW,cAAeC,mBACtC6G,EAAa,CAAC,UAAU,wBACtBC,GAAW,CAAC,YAAY,4BAE1BC,GAAa,iBACXC,EAAU,CAAC,MAAM,IAAI,SAAA,UAAA,SACrBA,EAAU,CAAC,MAAM,aAAI,YAAA,SACrBA,EAAU,CAAC,MAAM,IAAI,SAAA,uBAAA,SACrBA,EAAU,CAAC,MAAM,IAAI,SAAA,QAAA,SACrBA,EAAU,CAAC,MAAM,IAAI,SAAA,WAAA,SACrBA,EAAU,CAAC,MAAM,IAAI,SAAA,sBAAA,SACrBA,EAAU,CAAC,MAAM,aAAI,YAAA,SACrBA,EAAU,CAAC,MAAM,KAAK,SAAA,qBAAA,SACtBA,EAAU,CAAC,MAAM,KAAK,SAAA,uBAAA,SACtBA,EAAU,CAAC,MAAM,cAAK,gBAAA,SACtBA,EAAU,CAAC,MAAM,eAAM,YAAA,SACvBA,EAAU,CAAC,MAAM,MAAM,SAAA,sBAAA,SACvBA,EAAU,CAAC,MAAM,eAAM,4CAAA,SACvBA,EAAU,CAAC,MAAM,MAAM,SAAA,qBAG3BT,EAAM,CAAC,QAAQ,UAAU,KAAK,OAAO,UAAU,+BAC7CU,GAAU,CAAC,UAAU,0CAM7B,MAAG,CAAC,UAAU,4BACZ,MAAG,iBACD,QAAK,CAAC,QAAQ,iBAAiB,UAAU,+CAA8C,SAAA,SAAA,UAGvFL,EAAM,CAAC,MAAO3G,GAAS,cAAeC,mBACpC2G,EAAa,CAAC,UAAU,wBACtBC,GAAW,CAAC,YAAY,oCAE1BC,GAAa,iBACXC,EAAU,CAAC,MAAM,IAAI,SAAA,WAAA,SACrBA,EAAU,CAAC,MAAM,IAAI,SAAA,WAAA,SACrBA,EAAU,CAAC,MAAM,IAAI,SAAA,oCAajC,MAAG,CAAC,UAAU,OACb,SAAAE,EAAAA,IAACC,GAAoB,CAAA,CAAA,CAAA,UAItBC,GAAI,CACH,aAAa,QACb,MAAOvG,GACP,cAAeC,GACf,UAAU,kDAET,MAAG,CAAC,UAAU,6FACb,gBAACuG,GAAQ,CAAC,UAAU,6FACjBC,EAAU,CACT,MAAM,QACN,UAAU,0KACZ,SAAA,aAAA,SAGCA,EAAU,CACT,MAAM,MACN,UAAU,0KACZ,SAAA,YAAA,SAGCA,EAAU,CACT,MAAM,YACN,UAAU,0KACZ,SAAA,2BAOH,MAAG,CAAC,UAAU,uBAEZC,EAAW,CAAC,MAAM,QAAQ,UAAU,yCAClC,MAAG,CAAC,UAAU,2EACZ,KAAE,CAAC,UAAU,oDAA2C,uBAAA,SACxD,IAAC,CAAC,UAAU,6BAA4B,SAAA,uEAAA,GAGxCpH,GAAA,YAAAA,EAAgB,IAAK+D,GAAW,OAC3B,OAACA,SAEJ,MAAO,CAAqB,UAAU,wBACpC,MAAE,CACD,UAAU,oFACV,QAAS,IAAMD,EAAeC,EAAS,QAAQ,kBAE9C,KAAE,CAAC,UAAU,qCAA6BA,EAAS,QAAA,GACnDvD,EAAmBuD,EAAS,QAAQ,QAClCsD,EAAS,CAAC,UAAU,uBAAA,GAErBN,EAAA,IAAClB,EAAW,CAAC,UAAU,6BAG1BrF,EAAmBuD,EAAS,QAAQ,SAClC,MAAG,CAAC,UAAU,sCACV,UAAAS,EAAAT,EAAS,QAAT,YAAAS,EAAgB,IAAKzB,GACfA,EACEmB,EAAcnB,EAAMgB,EAAU,OAAO,EAD1B,UAflBA,EAAS,QAAQ,EAFL,IAwBvB,EAAA,YAGJqD,EAAW,CAAC,MAAM,MAAM,UAAU,yCAChC,MAAG,CAAC,UAAU,2EACZ,KAAE,CAAC,UAAU,2CAA2C,SAAA,YAAA,SACxD,IAAC,CAAC,UAAU,sCAA6B,uDAAA,GACzClH,GAAA,YAAAA,EAAoB,IAAKmD,GAAU,OAC9B,OAACA,SAEJ,MAAO,CAAiB,UAAU,+BAChC,KAAE,CAAC,UAAU,yCAA0C,SAAAA,EAAQ,KAAA,IAC7DmB,EAAAnB,EAAQ,aAAR,YAAAmB,EAAoB,IAAKT,GAAW,OAC/B,OAACA,SAEN,MAAO,CAAwC,UAAU,wBACvD,MAAE,CACD,UAAU,oFACV,QAAS,IAAID,EAAiB,GAAGT,EAAQ,KAAK,IAAIU,EAAS,KAAK,EAAE,kBAEjE,KAAE,CAAC,UAAU,4BAA6B,SAAAA,EAAS,KAAA,GACnDvD,EAAmB,GAAG6C,EAAQ,KAAK,IAAIU,EAAS,KAAK,EAAE,EACtDgD,EAAA,IAACM,EAAS,CAAC,UAAU,uBAAA,GAErBN,EAAA,IAAClB,EAAW,CAAC,UAAU,6BAG1BrF,EAAmB,GAAG6C,EAAQ,KAAK,IAAIU,EAAS,KAAK,EAAE,GACtDgD,EAAA,IAAC,MAAG,CAAC,UAAU,sCACR,UAAAvC,EAAAT,EAAS,QAAT,YAAAS,EAAgB,IAAKzB,GACfA,EACEmB,EAAcnB,EAAMgB,EAAU,KAAK,EADxB,UAfpB,GAAGV,EAAQ,KAAK,IAAIU,EAAS,KAAK,EAAE,EAFtB,IAwBvB,EAAA,GA3BKV,EAAQ,KAAK,EAFF,IAgCtB,EAAA,YAGJ+D,EAAW,CAAC,MAAM,YAAY,UAAU,yCACtC,MAAG,CAAC,UAAU,2EACZ,KAAE,CAAC,UAAU,2CAA2C,SAAA,YAAA,SACxD,IAAC,CAAC,UAAU,6BAA6B,SAAA,2CAAA,GACzChH,GAAA,YAAAA,EAAoB,IAAKiD,GAAU,OAC9B,OAACA,SAEJ,MAAO,CAAiB,UAAU,+BAChC,KAAE,CAAC,UAAU,yCAA0C,SAAAA,EAAQ,KAAA,IAC7DmB,EAAAnB,EAAQ,aAAR,YAAAmB,EAAoB,IAAKT,GAAW,OAC/B,OAACA,SAEN,MAAO,CAAwC,UAAU,wBACvD,MAAE,CACD,UAAU,oFACV,QAAS,IAAID,EAAiB,GAAGT,EAAQ,KAAK,IAAIU,EAAS,KAAK,EAAE,kBAEjE,KAAE,CAAC,UAAU,4BAA6B,SAAAA,EAAS,KAAA,GACnDvD,EAAmB,GAAG6C,EAAQ,KAAK,IAAIU,EAAS,KAAK,EAAE,EACtDgD,EAAA,IAACM,EAAS,CAAC,UAAU,uBAAA,GAErBN,EAAA,IAAClB,EAAW,CAAC,UAAU,6BAG1BrF,EAAmB,GAAG6C,EAAQ,KAAK,IAAIU,EAAS,KAAK,EAAE,GACtDgD,EAAA,IAAC,MAAG,CAAC,UAAU,sCACR,UAAAvC,EAAAT,EAAS,QAAT,YAAAS,EAAgB,IAAKzB,GACfA,EACEmB,EAAcnB,EAAMgB,EAAU,WAAW,EAD9B,UAfpB,GAAGV,EAAQ,KAAK,IAAIU,EAAS,KAAK,EAAE,EAFtB,IAwBvB,EAAA,GA3BKV,EAAQ,KAAK,EAFF,IAgCtB,EAAA,qBAOV,MAAG,CAAC,UAAU,0GACZ,MAAG,CAAC,UAAU,8CACZ,MAAG,CAAC,UAAU,gFACZ,MAAG,CAAC,UAAU,2DACZ,OAAI,CAAC,UAAU,6CAAoC,kBAAA,UACnD,OAAI,CAAC,UAAU,4CACbpC,EAAc,MAAID,CAAA,aAItB,MAAG,CAAC,UAAU,4BACb,eAACmF,GAAQ,CAAC,MAAOhF,GAAU,UAAU,gBAGtCiF,EAAK,CACJ,UAAU,6EACV,QAAQ,UACR,SAAU,CAAC3G,EACX,MAAO,CAAE,QAAS,CAAE,WAEnBqB,cAOf","x_google_ignoreList":[0,1]}