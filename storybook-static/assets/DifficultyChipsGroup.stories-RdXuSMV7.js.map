{"version":3,"file":"DifficultyChipsGroup.stories-RdXuSMV7.js","sources":["../../components/ui/DifficultyChipsGroup.tsx","../../components/stories/DifficultyChipsGroup.stories.tsx"],"sourcesContent":["import React from \"react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dice3 } from \"lucide-react\";\n\nexport interface DifficultyTier {\n  id: string;\n  label: string;\n}\n\nexport interface DifficultyChipsGroupProps {\n  value: string[];\n  onChange: (value: string[]) => void;\n  stats: { [key: string]: number };\n  tiers: DifficultyTier[];\n  renderCount?: (count: number, selected: boolean) => React.ReactNode;\n  anyLabel?: string;\n}\n\nexport const DifficultyChipsGroup: React.FC<DifficultyChipsGroupProps> = ({\n  value,\n  onChange,\n  stats,\n  tiers,\n  renderCount,\n  anyLabel = \"любая сложность\",\n}) => {\n  const handleClick = (tierId: string) => {\n    if (tierId === \"any\") {\n      onChange([\"any\"]);\n      return;\n    }\n    if (value.includes(tierId)) {\n      const newValue = value.filter((v) => v !== tierId);\n      onChange(newValue.length === 0 ? [\"any\"] : newValue);\n    } else {\n      onChange([...value.filter((v) => v !== \"any\"), tierId]);\n    }\n  };\n  return (\n    <div className=\"flex flex-wrap gap-1.5 items-center\">\n      <Badge\n        key=\"any\"\n        variant={value.includes(\"any\") ? \"default\" : \"outline\"}\n        onClick={() => handleClick(\"any\")}\n        className={`cursor-pointer transition-colors text-xs px-2 py-0.5 flex items-center gap-1 ${\n          value.includes(\"any\")\n            ? \"bg-teal-600 hover:bg-teal-700 text-white border-teal-600\"\n            : \"border-gray-300 text-gray-700 hover:bg-gray-100\"\n        }`}\n        role=\"radio\"\n        aria-checked={value.includes(\"any\")}\n        tabIndex={0}\n      >\n        {anyLabel}\n        {renderCount\n          ? renderCount(Object.values(stats).reduce((sum, count) => sum + count, 0), value.includes(\"any\"))\n          : <span className=\"ml-2 text-gray-400\">{Object.values(stats).reduce((sum, count) => sum + count, 0)}</span>}\n      </Badge>\n      {tiers.map((tier) => {\n        const count = stats[tier.id] || 0;\n        const isDisabled = count === 0;\n        const isSelected = value.includes(tier.id);\n        return (\n          <Badge\n            key={tier.id}\n            variant={isSelected && !isDisabled ? \"default\" : \"outline\"}\n            onClick={() => !isDisabled && handleClick(tier.id)}\n            className={`cursor-pointer transition-colors text-xs px-2 py-0.5 ${\n              isDisabled\n                ? \"cursor-not-allowed opacity-50 bg-gray-100 text-gray-400 border-gray-200\"\n                : isSelected\n                ? \"bg-teal-600 hover:bg-teal-700 text-white border-teal-600\"\n                : \"border-gray-300 text-gray-700 hover:bg-gray-100\"\n            }`}\n            aria-disabled={isDisabled}\n            role=\"radio\"\n            aria-checked={isSelected && !isDisabled}\n            tabIndex={isDisabled ? -1 : 0}\n          >\n            {tier.label}\n            {renderCount\n              ? renderCount(count, isSelected && !isDisabled)\n              : <span className=\"ml-2 text-gray-400\">{count}</span>}\n          </Badge>\n        );\n      })}\n    </div>\n  );\n}; ","import { DifficultyChipsGroup, DifficultyTier } from \"../ui/DifficultyChipsGroup\";\nimport type { Meta, StoryObj } from \"@storybook/react\";\nimport React, { useState } from \"react\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Badge } from \"@/components/ui/badge\";\n\nconst difficultyTiers: DifficultyTier[] = [\n  { id: \"easiest\", label: \"самые лёгкие\" },\n  { id: \"easy\", label: \"лёгкие\" },\n  { id: \"medium\", label: \"средние\" },\n  { id: \"hard\", label: \"сложные\" },\n  { id: \"hardest\", label: \"самые сложные\" },\n];\n\nconst mockStats = {\n  easiest: 4,\n  easy: 9,\n  medium: 57,\n  hard: 44,\n  hardest: 0,\n};\n\nconst meta: Meta<typeof DifficultyChipsGroup> = {\n  title: \"Blocks/DifficultyChipsGroup\",\n  component: DifficultyChipsGroup,\n};\nexport default meta;\n\n/**\n * Группа чипсов для выбора уровня сложности.\n *\n * - Позволяет выбрать один из вариантов сложности.\n * - Управление выбором через value и onChange.\n */\n\ntype Story = StoryObj<typeof DifficultyChipsGroup>;\n\nexport const CustomCounter: Story = {\n  render: () => {\n    const [value, setValue] = useState<string[]>([\"medium\"]);\n    return (\n      <DifficultyChipsGroup\n        value={value}\n        onChange={setValue}\n        stats={mockStats}\n        tiers={difficultyTiers}\n        renderCount={(count, selected) => (\n          <span\n            style={{\n              marginLeft: 8,\n              color: selected ? \"#fff\" : \"#b0b0b0\",\n              fontWeight: 400,\n              fontSize: 14,\n            }}\n          >\n            {count}\n          </span>\n        )}\n        anyLabel=\"любая сложность\"\n      />\n    );\n  },\n};\n\nexport const SiteStyle: Story = {\n  render: () => {\n    const [value, setValue] = useState<string[]>([\"any\"]);\n    return (\n      <DifficultyChipsGroup\n        value={value}\n        onChange={setValue}\n        stats={mockStats}\n        tiers={difficultyTiers}\n        renderCount={(count, selected) => (\n          <span style={{ marginLeft: 4, color: selected ? \"#fff\" : \"#b0b0b0\", fontWeight: 400, fontSize: 14 }}>\n            ({count})\n          </span>\n        )}\n        anyLabel=\"любая сложность\"\n      />\n    );\n  },\n};\n\nexport const DropdownChips: Story = {\n  render: () => {\n    const [open, setOpen] = useState(false);\n    const allTierIds = difficultyTiers.map((t) => t.id);\n    const [value, setValue] = useState<string[]>([\"any\"]);\n\n    // Логика выбора сложности\n    const handleChange = (id: string) => {\n      if (id === \"any\") {\n        setValue([\"any\"]);\n        return;\n      }\n      let newValue = value.includes(id)\n        ? value.filter((v) => v !== id)\n        : [...value.filter((v) => v !== \"any\"), id];\n      // Если ничего не выбрано — снова any\n      if (newValue.length === 0) newValue = [\"any\"];\n      // Если выбраны все — это any\n      if (newValue.length === allTierIds.length) newValue = [\"any\"];\n      setValue(newValue);\n    };\n\n    const selectedLabel =\n      value.length === 1 && value[0] === \"any\"\n        ? \"любая сложность\"\n        : value\n            .map(\n              (v) =>\n                v === \"easiest\"\n                  ? \"самые лёгкие\"\n                  : v === \"easy\"\n                  ? \"лёгкие\"\n                  : v === \"medium\"\n                  ? \"средние\"\n                  : v === \"hard\"\n                  ? \"сложные\"\n                  : v === \"hardest\"\n                  ? \"самые сложные\"\n                  : v\n            )\n            .join(\", \");\n    // SVG шеврона\n    const Chevron = ({ open }: { open: boolean }) => (\n      <svg\n        width=\"16\"\n        height=\"16\"\n        viewBox=\"0 0 16 16\"\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        style={{\n          marginLeft: 6,\n          transition: \"transform 0.2s\",\n          transform: open ? \"rotate(180deg)\" : \"rotate(0deg)\",\n        }}\n      >\n        <path\n          d=\"M4.5 6L8 9.5L11.5 6\"\n          stroke=\"#888\"\n          strokeWidth=\"1.5\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n      </svg>\n    );\n    // Кнопка закрытия для мобильных устройств\n    const MobileCloseButton = () => (\n      <button\n        onClick={() => setOpen(false)}\n        style={{\n          display: \"block\",\n          width: \"100%\",\n          marginTop: 10,\n          padding: \"8px 0\",\n          background: \"#f3f3f3\",\n          border: \"none\",\n          borderRadius: 6,\n          color: \"#333\",\n          fontSize: 14,\n          fontWeight: 500,\n          cursor: \"pointer\",\n        }}\n        className=\"mobile-only\"\n      >\n        Закрыть\n      </button>\n    );\n    return (\n      <Popover open={open} onOpenChange={setOpen}>\n        <PopoverTrigger asChild>\n          <Badge\n            variant=\"outline\"\n            className=\"cursor-pointer py-1 px-3 flex items-center gap-1.5 hover:bg-gray-100 transition-colors difficulty-dropdown-badge\"\n            style={{\n              minWidth: 0,\n              width: \"fit-content\",\n              maxWidth: \"none\",\n              paddingRight: 10,\n              paddingLeft: 14,\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"space-between\",\n              whiteSpace: \"nowrap\",\n            }}\n          >\n            <span className=\"text-xs\" style={{ overflow: \"hidden\", textOverflow: \"ellipsis\", fontWeight: 400 }}>\n              {selectedLabel}\n            </span>\n            <Chevron open={open} />\n          </Badge>\n        </PopoverTrigger>\n        <PopoverContent\n          className=\"w-auto p-2 difficulty-popover-content\"\n          style={{\n            minWidth: 220,\n            maxWidth: 320,\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            gap: 8,\n            alignItems: \"stretch\",\n          }}\n        >\n          <div className=\"sb-difficulty-chips-group\" style={{ width: \"100%\", display: \"flex\", flexWrap: \"wrap\", gap: 8 }}>\n            {/* Любая сложность */}\n            <Badge\n              key=\"any\"\n              variant={value.length === 1 && value[0] === \"any\" ? \"default\" : \"outline\"}\n              className={`cursor-pointer transition-colors text-xs px-2 py-0.5 flex items-center gap-1 ${\n                value.length === 1 && value[0] === \"any\"\n                  ? \"bg-teal-600 hover:bg-teal-700 text-white border-teal-600\"\n                  : \"border-gray-300 text-gray-700 hover:bg-gray-100\"\n              }`}\n              style={{ fontWeight: 400 }}\n              onClick={() => handleChange(\"any\")}\n            >\n              любая сложность\n            </Badge>\n            {difficultyTiers.map((tier) => (\n              <Badge\n                key={tier.id}\n                variant={\n                  value.includes(tier.id) && value[0] !== \"any\"\n                    ? \"default\"\n                    : \"outline\"\n                }\n                className={`cursor-pointer transition-colors text-xs px-2 py-0.5 flex items-center gap-1 ${\n                  value.includes(tier.id) && value[0] !== \"any\"\n                    ? \"bg-teal-600 hover:bg-teal-700 text-white border-teal-600\"\n                    : \"border-gray-300 text-gray-700 hover:bg-gray-100\"\n                }`}\n                style={{ fontWeight: 400 }}\n                onClick={() => handleChange(tier.id)}\n              >\n                {tier.label}\n              </Badge>\n            ))}\n          </div>\n          <div className=\"desktop-close-hint\" style={{ marginTop: 10, color: \"#888\", fontSize: 13, textAlign: \"center\" }}>\n            ESC или клик вне меню для закрытия\n          </div>\n          <div className=\"mobile-close-btn\" style={{ display: \"none\" }}>\n            <MobileCloseButton />\n          </div>\n          <style>{`\n            @media (max-width: 600px) {\n              .mobile-close-btn { display: block !important; }\n              .desktop-close-hint { display: none !important; }\n              .difficulty-dropdown-badge {\n                width: auto !important;\n                max-width: 95vw !important;\n                margin: 0 !important;\n              }\n              .difficulty-popover-content {\n                max-width: 95vw !important;\n                min-width: 0 !important;\n              }\n            }\n            .sb-difficulty-chips-group .badge,\n            .sb-difficulty-chips-group .badge * {\n              font-weight: 400 !important;\n            }\n          `}</style>\n        </PopoverContent>\n      </Popover>\n    );\n  },\n}; "],"names":["DifficultyChipsGroup","value","onChange","stats","tiers","renderCount","anyLabel","handleClick","tierId","newValue","v","_jsxs","sum","count","_jsx","tier","isDisabled","isSelected","Badge","id","difficultyTiers","label","mockStats","medium","easiest","easy","hard","CustomCounter","render","setValue","useState","marginLeft","selected","fontWeight","color","fontSize","SiteStyle","DropdownChips","setOpen","allTierIds","open","selectedLabel","map","handleChange","transform","includes","filter","length","display","width","marginTop","background","border","borderRadius","paddingRight","paddingLeft","justifyContent","whiteSpace","overflow","textOverflow","transition","minWidth","maxWidth","flexWrap","gap","MobileCloseButton","padding","cursor","Popover","PopoverTrigger","alignItems","Chevron","PopoverContent","docs"],"mappings":"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"}