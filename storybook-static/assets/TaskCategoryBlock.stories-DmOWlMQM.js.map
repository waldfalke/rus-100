{"version":3,"file":"TaskCategoryBlock.stories-DmOWlMQM.js","sources":["../../components/stories/TaskCategoryBlock.stories.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Dice3, ChevronDown, ChevronUp } from \"lucide-react\";\nimport { TaskCategorySelector } from \"../ui/task-category-selector\";\n\ntype TestItem = {\n  id: string;\n  title: string;\n  count?: number;\n  maxCount?: number;\n};\n\ntype TestCategory = {\n  category: string;\n  items: TestItem[];\n};\n\ntype TaskDifficultyStats = { [key: string]: number };\n\nconst mockCategory: TestCategory = {\n  category: \"Работа с текстом\",\n  items: [\n    { id: \"1\", title: \"№1. Средства связи предложений в тексте\", count: 0, maxCount: 5 },\n    { id: \"2\", title: \"№2. Определение темы и главной мысли текста\", count: 2, maxCount: 5 },\n  ],\n};\n\nconst mockItemStats: { [key: string]: TaskDifficultyStats } = {\n  \"1\": { easiest: 2, easy: 1, medium: 1, hard: 0, hardest: 0 },\n  \"2\": { easiest: 0, easy: 2, medium: 2, hard: 1, hardest: 0 },\n};\n\nconst difficultyTiers = [\n  { id: \"easiest\", label: \"Самые лёгкие\" },\n  { id: \"easy\", label: \"Лёгкие\" },\n  { id: \"medium\", label: \"Средние\" },\n  { id: \"hard\", label: \"Сложные\" },\n  { id: \"hardest\", label: \"Самые сложные\" },\n];\n\nexport default {\n  title: \"Blocks/TaskCategoryBlock\",\n  render: () => {\n    // --- Состояния, как на сайте ---\n    const [expanded, setExpanded] = useState(true);\n    const [itemDifficulties, setItemDifficulties] = useState<{ [key: string]: string[] }>({});\n    const [itemCategories, setItemCategories] = useState<{ [key: string]: string[] }>({});\n    const [counts, setCounts] = useState<{ [key: string]: number }>({ \"1\": 0, \"2\": 2 });\n\n    // --- Логика, как на сайте ---\n    const handleItemDifficultyChange = (itemId: string, difficultyId: string) => {\n      setItemDifficulties(prev => {\n        const currentDifficulties = prev[itemId] || [];\n        if (difficultyId === 'any') {\n          return { ...prev, [itemId]: ['any'] };\n        }\n        let newDifficulties: string[];\n        if (currentDifficulties.includes(difficultyId)) {\n          newDifficulties = currentDifficulties.filter(d => d !== difficultyId);\n          if (newDifficulties.length === 0) newDifficulties = ['any'];\n        } else {\n          newDifficulties = currentDifficulties.filter(d => d !== 'any').concat(difficultyId);\n        }\n        return { ...prev, [itemId]: newDifficulties };\n      });\n    };\n    const handleCategoriesChange = (itemId: string, categories: string[]) => {\n      setItemCategories(prev => ({ ...prev, [itemId]: categories }));\n    };\n    const handleCountChange = (itemId: string, increment: number) => {\n      setCounts(prev => {\n        const oldCount = prev[itemId] || 0;\n        const maxCount = mockCategory.items.find(i => i.id === itemId)?.maxCount || 10;\n        const newCount = Math.max(0, Math.min(maxCount, oldCount + increment));\n        return { ...prev, [itemId]: newCount };\n      });\n    };\n\n    // --- JSX карточки задания (копия с сайта) ---\n    const renderItemRow = (item: TestItem) => {\n      const currentCount = counts[item.id] || 0;\n      const maxCount = item.maxCount || 10;\n      const itemStats = mockItemStats[item.id];\n      const taskNumber = item.title.match(/№\\s*(\\d+)/)?.[1];\n      return (\n        <Card key={item.id} className=\"border border-gray-200 mb-2\">\n          <CardContent className=\"p-3 sm:p-4\">\n            <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-3\">\n              <div className=\"flex items-center gap-2 flex-grow pr-4\">\n                <span className=\"text-sm text-gray-800\">{item.title}</span>\n                {taskNumber && (\n                  <TaskCategorySelector\n                    taskNumber={taskNumber}\n                    selectedCategories={itemCategories[item.id] || []}\n                    onCategoriesChange={(categories) => handleCategoriesChange(item.id, categories)}\n                  />\n                )}\n              </div>\n              <div className=\"flex flex-wrap items-center gap-x-4 gap-y-2 w-full sm:w-auto justify-end\">\n                <div className=\"flex flex-wrap gap-1.5 items-center\">\n                  {itemStats ? (\n                    <>\n                      <Badge\n                        key={`${item.id}-any`}\n                        variant={(!itemDifficulties[item.id] || itemDifficulties[item.id]?.includes('any')) ? \"default\" : \"outline\"}\n                        onClick={() => handleItemDifficultyChange(item.id, 'any')}\n                        className={`cursor-pointer transition-colors text-sm px-2 py-0.5 flex items-center gap-1 ${\n                          !itemDifficulties[item.id] || itemDifficulties[item.id]?.includes('any')\n                            ? \"bg-teal-600 hover:bg-teal-700 text-white border-teal-600\"\n                            : \"border-gray-300 text-gray-700 hover:bg-gray-100\"\n                        }`}\n                        role=\"radio\"\n                        aria-checked={!itemDifficulties[item.id] || itemDifficulties[item.id]?.includes('any')}\n                        tabIndex={0}\n                      >\n                        <Dice3 className=\"w-3 h-3\" />\n                        Любая (<span className=\"text-sm\">{Object.values(itemStats).reduce((sum, count) => sum + count, 0)})</span>\n                      </Badge>\n                      {difficultyTiers.map(tier => {\n                        const countForItemTier = itemStats[tier.id] || 0;\n                        const isDisabled = countForItemTier === 0;\n                        const isSelected = itemDifficulties[item.id]?.includes(tier.id);\n                        return (\n                          <Badge\n                            key={`${item.id}-${tier.id}`}\n                            variant={isSelected && !isDisabled ? \"default\" : \"outline\"}\n                            onClick={() => !isDisabled && handleItemDifficultyChange(item.id, tier.id)}\n                            className={`cursor-pointer transition-colors text-sm px-2 py-0.5 ${\n                              isDisabled\n                                ? \"cursor-not-allowed opacity-50 bg-gray-100 text-gray-400 border-gray-200\"\n                                : isSelected\n                                ? \"bg-teal-600 hover:bg-teal-700 text-white border-teal-600\"\n                                : \"border-gray-300 text-gray-700 hover:bg-gray-100\"\n                            }`}\n                            aria-disabled={isDisabled}\n                            role=\"radio\"\n                            aria-checked={isSelected && !isDisabled}\n                            tabIndex={isDisabled ? -1 : 0}\n                          >\n                            {tier.label} (<span className=\"text-sm\">{countForItemTier})</span>\n                          </Badge>\n                        );\n                      })}\n                    </>\n                  ) : (\n                    <span className=\"text-xs text-gray-400 italic\">Нет данных о сложности</span>\n                  )}\n                </div>\n                <Separator orientation=\"vertical\" className=\"h-6 hidden sm:block\" />\n                <div className=\"flex items-center space-x-1.5 flex-shrink-0\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    className=\"h-6 w-6\"\n                    onClick={() => handleCountChange(item.id, -1)}\n                    disabled={currentCount <= 0}\n                  >\n                    -\n                  </Button>\n                  <span className=\"text-sm font-medium w-8 text-center tabular-nums\">{currentCount}</span>\n                  <Button\n                    variant=\"outline\"\n                    size=\"icon\"\n                    className=\"h-6 w-6\"\n                    onClick={() => handleCountChange(item.id, 1)}\n                    disabled={currentCount >= maxCount}\n                  >\n                    +\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      );\n    };\n\n    // --- JSX категории (копия с сайта) ---\n    return (\n      <div className=\"mb-6\">\n        <div\n          className=\"flex items-center justify-between bg-gray-50 p-2 sm:p-3 rounded-lg cursor-pointer\"\n          onClick={() => setExpanded((v) => !v)}\n        >\n          <h3 className=\"font-medium text-gray-800\">{mockCategory.category}</h3>\n          {expanded ? (\n            <ChevronUp className=\"w-5 h-5 text-gray-500\" />\n          ) : (\n            <ChevronDown className=\"w-5 h-5 text-gray-500\" />\n          )}\n        </div>\n        {expanded && (\n          <div className=\"mt-2 sm:mt-3 space-y-2 sm:space-y-3\">\n            {mockCategory.items.map(renderItemRow)}\n          </div>\n        )}\n        <div className=\"desktop-close-hint text-xs\" style={{ marginTop: 10, color: \"#888\", textAlign: \"center\" }}>ESC или клик вне меню для закрытия</div>\n      </div>\n    );\n  },\n}; "],"names":["items","id","title","count","maxCount","easy","medium","hard","hardest","easiest","difficultyTiers","label","setExpanded","useState","itemDifficulties","setItemDifficulties","itemCategories","setItemCategories","counts","setCounts","handleItemDifficultyChange","itemId","difficultyId","prev","currentDifficulties","newDifficulties","includes","filter","d","length","concat","handleCategoriesChange","categories","handleCountChange","oldCount","mockCategory","find","i","newCount","Math","increment","item","currentCount","taskNumber","match","Card","CardContent","TaskCategorySelector","itemStats","_jsxs","_Fragment","reduce","sum","map","tier","isDisabled","countForItemTier","isSelected","mockItemStats","_jsx","Separator","Button","marginTop","color","textAlign","v","category","expanded","ChevronUp"],"mappings":"g3BAwBEA,MAAAA,EACE,CAAEC,SAAO,mBAAEC,MAAK,CAA6CC,CAAAA,OAAQD,MAAA,0CAAAC,MAAA,EAAAC,SAAA,CAAA,EAAEA,CAAAA,GAAAA,IAAUF,MAAA,8CAAAC,MAAA,EAAAC,SAAA,CAAA,CAAA,CAC/EH,EAA+DE,EAAQ,CAAEC,EAAAA,CAAAA,QAAU,EAAAC,KAAA,EAAAC,OAAA,EAAAC,KAAA,EAAAC,QAAA,CAAA,EAAE,EAAC,CAAAC,QAAA,EAAAJ,KAAA,EAAAC,OAAA,EAAAC,KAAA,EAAAC,QAAA,CAAA,CAE5F,EAE2BE,EAA8B,CAAK,CAAAT,GAAA,UAAAU,MAAA,cAAA,EAC5D,CAAAV,GAAK,OAAAU,MAAA,QAAA,EAAEF,CAAAA,GAAAA,SAAUE,MAAA,SAAA,EAAEN,CAAAA,GAAI,OAAGM,MAAA,SAAA,EAAEL,CAAAA,GAAAA,UAASK,MAAA,eAAA,CAAEJ,MACvCL,MAAK,2BAAEO,OAAAA,IAAU,CAAWH,KAAM,GAAGM,CAAA,EAAAC,EAAAA,SAAA,EAAA,EAAQ,CAACC,EAAAC,CAAA,EAAAF,EAAAA,SAAA,CAAA,CAAA,EAAEL,CAAOQ,EAAEC,CAAA,EAAAJ,EAAAA,SAAA,CAAA,CAAA,EAAE,CAAAK,EAAAC,CAAA,EAAAN,WAAA,CAAA,EAAA,EAAA,EAAA,CAAA,CAAA,EAI5CO,EAAAA,CAAAC,EAAAC,IAAA,CAAEX,EAAOY,GAAA,CACxB,MAAAC,EAAAD,EAAAF,CAAA,GAAA,CAAA,EAAY,GAAAC,IAAA,MAAS,MAAA,CAAA,GAAAC,EAAA,CAAAF,CAAA,EAAA,CAAA,KAAA,CAAA,EACPI,IAAAA,EAASD,OAAAA,EAAAE,SAAAJ,CAAA,GACvBG,EAAAD,EAAAG,OAAAC,GAAAA,IAAAN,CAAA,EAAYG,EAAAI,SAAA,IAAAJ,EAAA,CAAA,KAAA,IACZD,EAAAA,EAAAG,OAAAC,GAAAA,IAAA,KAAA,EAAAE,OAAAR,CAAA,EAAwB,CAAA,GAAAC,EAAA,CAAAF,CAAA,EAAAI,CAAA,CAAA,CACzB,CAED,EACmCM,EAAAA,CAAAV,EAAAW,IAAA,CAC3Bf,EAAQM,IAAA,CAAA,GAAAA,EAAA,CAAAF,CAAA,EAAAW,CAAAA,EAAA,CACZ,EACMC,EAAWrB,CAAAA,EAAeC,IAAc,CAC9CM,EAAuBI,GAAA,OAA0CW,MAAAA,IAAiBb,CAAA,GAAA,EAAOjB,IAAA+B,EAAAA,EAAAnC,MAAAoC,KAAAC,GAAAA,EAAApC,KAAAoB,CAAA,IAAAc,YAAAA,EAAA/B,WAAA,GACpEkC,EAAAC,oBAAoBnC,EAAW8B,EAACM,CAAA,CAAA,EAAQ,MAAA,CAAA,GAAOjB,GAAQF,CAAE,EAAAiB,CAAA,CAAA,CAAI,CAClF,IAAwEG,gBAAE,MAAKC,EAAAxB,EAAAuB,EAAAxC,EAAA,GAAA,EAAIG,EAAAqC,EAAArC,UAAA,aAEnFuC,GAAAF,EAAAA,EAAAvC,MAAA0C,MAAA,WAAA,IAAAH,YAAAA,EAAA,GACMrB,aACeyB,EAAA,WAAS,8BAC1B,eAAAC,aAAyB,aACrBxB,gBAAAA,MAAAA,CAAAA,UAAiB,+FACZ,MAAA,CAAA,UAAA,yDAAS,OAAA,CAAA,UAAA,wBAAAmB,SAAAA,EAAAvC,KAAAA,GAAGmB,SAAkB0B,EAAA,CACvC,WAAAJ,EACIlB,mBAAyBT,EAAAyB,EAAAxC,EAAA,GAAA,CAAA,qBACIqB,GAAeS,EAAAU,EAAAxC,GAAA+B,CAAA,cAI9CP,MAAAA,CAAAA,UAAkBD,2FACpB,MAAA,CAAA,UAAA,sCACOwB,SAAAA,EAASC,EAAA,KAAAC,WAAA,kBAAYzB,EAAiB,CAC7C,QAAA,CAAAX,EAAA2B,EAAAxC,EAAA,IAAAa,EAAAA,EAAA2B,EAAAxC,EAAA,IAAAa,MAAAA,EAAAY,SAAA,OAAA,UAAA,UACH,QAAA,IAAAN,EAAAqB,EAAAxC,GAAA,KAAA,EACK8B,UAAyBA,mFACFU,EAAAxC,EAAA,IAAAa,EAAAA,EAAA2B,EAAAxC,EAAA,IAAAa,MAAAA,EAAAY,SAAA,OAAS,2DAAYM,iDAAAA,GACjD,KAAA,QACKC,eAA2B,CAAEnB,EAAiB2B,EAAExC,EAAA,KAAWa,EAAAA,EAAA2B,EAAAxC,EAAA,IAAAa,YAAAA,EAAAY,SAAA,QAC7C,SAAA,kBAECS,EAAAA,CAAAA,UAAkB,SAAA,oBACV,OAAII,CAAAA,UAAiB,2BAAaC,OAAAA,CAAW,EAAAW,OAAA,CAAAC,EAAAjD,IAAAiD,EAAAjD,EAAA,CAAA,EAAA,GAAA,IAVzB,EAAA,GAAAsC,EAAAxC,EAAA,MAAA,EAW7BS,EAAA2C,IAAAC,GAAA,OAAYhB,MAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAUiB,EAAAC,IAAA,EACtCC,GAAA3C,EAAAA,EAAA2B,EAAAxC,EAAA,IAAAa,YAAAA,EAAAY,SAAA4B,EAAArD,IACH,gBAED,CAC2B,WAAe,CAAAsD,EAAA,UAAA,UACb,YAAS,CAAAA,GAAKnC,EAAAqB,EAAAxC,GAAAqD,EAAArD,EAAA,EACnBG,kEACJsD,EACW,0EAEPD,EACiB,2DAC2D,iDAAA,GAElF,gBAAUF,EACL,KACR,QAMA,eAAAE,GAAA,CAAAF,EACS,SAA2EA,EAAA,GAAA,YAE3ED,EACP3C,MAAA,YAAA,OAAA,CAAA,UAAA,oBAAA6C,EAAA,GAAA,MAvBjB,GAAAf,EAAAxC,EAAA,IAAAqD,EAAArD,EAAA,EAAA,CAsCJ,CAAA,CAAA,EAGwB,EAAA0D,EAAA,IAAMH,OAAAA,CAAAA,UAAAA,wCAAyC,mCAG/CI,EAAA,CACE,YACO,WAAU,UAAW,qBAAA,UAetD,MAAA,CAAA,UAAiC,8DACjCC,EAAA,CAEwB,QAAA,UACJ,KAAE,OAID,UAAA,UACK,QAAY,IAAA5B,EAAYQ,EAAAxC,GAAU,EAAA,EACxC,SAAUyC,GAA8C,EAC1D,SAAA,GAAA,SASC,OAAI,CAAC,UAAU,4DAAoDA,CAAAA,SACnEmB,EAAA,CAOnB,QAAA,UACoB,KAAM,OACL,UAAA,UACF,QAAA,IAAA5B,EAAAQ,EAAAxC,GAAA,CAAA,EACF,SAAAyC,GAAAtC,EACM,SAAA,kBAzHEqC,EAAAxC,EAACsB,CA2I1B,EAIU,cAEF,iBAAK,wBAAgDuC,MAAAA,CAAeC,UAAa,oFAAEC,QAAW,IAAApD,EAAAqD,GAAA,CAAAA,CAAA,kBAC3F,KAAA,CAAA,UAAA,4BAAA9B,SAAAA,EAAA+B,QAAAA,GAETC,QAACC,EAAA,CAAA,UAAA,uBAAA"}