{"version":3,"file":"TaskCardBlockA.stories-C4VUbDtc.js","sources":["../../components/stories/TaskCardBlockA.stories.tsx"],"sourcesContent":["import { TaskCardBlock } from \"../ui/TaskCardBlock\";\r\nimport type { Meta, StoryObj } from \"@storybook/react\";\r\nimport React, { useState } from \"react\";\r\nimport { Popover, PopoverTrigger, PopoverContent } from \"@/components/ui/popover\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\n\r\nconst meta: Meta<typeof TaskCardBlock> = {\r\n  title: \"Blocks/TaskCardBlockA\",\r\n  component: TaskCardBlock,\r\n};\r\nexport default meta;\r\n\r\ntype Story = StoryObj<typeof TaskCardBlock>;\r\n\r\nconst mockItem = {\r\n  id: 1,\r\n  title: \"№1. Средства связи предложений в тексте\",\r\n};\r\nconst mockCategory = \"Синтаксис\";\r\nconst mockCategories = [\"Синтаксис\", \"Орфография\", \"Пунктуация\"];\r\nconst mockItemStats = { easiest: 2, easy: 5, medium: 10, hard: 6, hardest: 1 };\r\nconst mockDifficultyTiers = [\r\n  { id: \"easiest\", label: \"Самые лёгкие\" },\r\n  { id: \"easy\", label: \"Лёгкие\" },\r\n  { id: \"medium\", label: \"Средние\" },\r\n  { id: \"hard\", label: \"Сложные\" },\r\n  { id: \"hardest\", label: \"Самые сложные\" },\r\n];\r\n\r\nexport const FullCard_A: Story = {\r\n  render: () => {\r\n    const [currentCount, setCurrentCount] = useState(0);\r\n    const [difficulties, setDifficulties] = useState<string[]>([\"any\"]);\r\n    const [categories, setCategories] = useState<string[]>(mockCategories);\r\n    return (\r\n      <TaskCardBlock\r\n        item={mockItem}\r\n        category={mockCategory}\r\n        currentCount={currentCount}\r\n        maxCount={20}\r\n        onDecrement={() => setCurrentCount((c) => Math.max(0, c - 1))}\r\n        onIncrement={() => setCurrentCount((c) => Math.min(20, c + 1))}\r\n        difficulties={difficulties}\r\n        onDifficultyChange={(id) => setDifficulties([id])}\r\n        categories={categories}\r\n        onCategoriesChange={setCategories}\r\n        itemStats={mockItemStats}\r\n        difficultyTiers={mockDifficultyTiers}\r\n      />\r\n    );\r\n  },\r\n};\r\n\r\nexport const OnlyDifficulty_A: Story = {\r\n  render: () => {\r\n    const [currentCount, setCurrentCount] = useState(0);\r\n    const [difficulties, setDifficulties] = useState<string[]>([\"any\"]);\r\n    return (\r\n      <TaskCardBlock\r\n        item={mockItem}\r\n        category={null}\r\n        currentCount={currentCount}\r\n        maxCount={20}\r\n        onDecrement={() => setCurrentCount((c) => Math.max(0, c - 1))}\r\n        onIncrement={() => setCurrentCount((c) => Math.min(20, c + 1))}\r\n        difficulties={difficulties}\r\n        onDifficultyChange={(id) => setDifficulties([id])}\r\n        categories={[]}\r\n        onCategoriesChange={() => {}}\r\n        itemStats={mockItemStats}\r\n        difficultyTiers={mockDifficultyTiers}\r\n      />\r\n    );\r\n  },\r\n};\r\n\r\nexport const Minimal_A: Story = {\r\n  render: () => {\r\n    const [currentCount, setCurrentCount] = useState(0);\r\n    return (\r\n      <TaskCardBlock\r\n        item={{ id: 2, title: \"1. Правописание союзов/омонимичные части речи (чтобы/что бы и тд)\" }}\r\n        category={null}\r\n        currentCount={currentCount}\r\n        maxCount={20}\r\n        onDecrement={() => setCurrentCount((c) => Math.max(0, c - 1))}\r\n        onIncrement={() => setCurrentCount((c) => Math.min(20, c + 1))}\r\n        difficulties={[]}\r\n        onDifficultyChange={() => {}}\r\n        categories={[]}\r\n        onCategoriesChange={() => {}}\r\n        itemStats={null}\r\n        difficultyTiers={mockDifficultyTiers}\r\n      />\r\n    );\r\n  },\r\n}; "],"names":["title","component","TaskCardBlock","mockItem","mockCategory","mockCategories","easiest","medium","easy","hard","hardest","mockDifficultyTiers","label","id","FullCard_A","render","currentCount","setCurrentCount","useState","difficulties","setDifficulties","categories","setCategories","Story","c","Math","max","min","mockItemStats","OnlyDifficulty_A","Minimal_A","source"],"mappings":"8xBAOEA,MAAAA,EAA8B,CAC9BC,MAAAA,wBACDA,UAAAC,CACD,EAOCC,EAAA,CACKC,GAAAA,EACAC,MAAAA,yCACN,EAAwBC,EAAU,YAAMD,EAAG,CAAA,YAAA,aAAA,YAAA,EAAEE,EAAU,CAAAD,QAAA,EAAAE,KAAA,EAAAD,OAAA,GAAAE,KAAA,EAAAC,QAAA,CAAA,EAAMC,EAAG,CAAED,CAAAA,GAAAA,UAASE,MAAA,cAAA,EAAG,CAAAC,GAAA,OAAAD,MAAA,QAAA,EACxED,CAAAA,GAAAA,SAAAA,MAAmB,SACvB,EAAEE,CAAEA,GAAW,OAAAD,MAAA,SAAA,EAAEA,CAAAA,GAAO,UAAAA,MAAA,eAAA,CAAgB,EACnBE,EAAA,CACrBC,OAAAA,IAAA,CAAI,KAAU,CAAAC,EAAAC,CAAA,EAAAC,EAAAA,SAAA,CAAA,EAAS,CAAAC,EAAAC,CAAA,EAAAF,WAAA,CAAA,KAAA,CAAA,EACvB,CAAAG,EAAAC,CAAA,EAAAJ,EAAAA,SAAAb,CAAA,EAAI,aAAeH,EAAE,CACrB,KAAAC,EAAe,SAAAC,EAAS,aAAAY,EACzB,SAAA,GAEYF,YAAAA,IAAYS,EAAQC,GAAAC,KAAAC,IAAA,EAAAF,EAAA,CAAA,CAAA,EACzB,YAAQ,IAAAP,EAAAO,GAAAC,KAAAE,IAAA,GAAAH,EAAA,CAAA,CAAA,EACN,aAAAL,EACN,mBAAqBC,GAAAA,EAA2B,CAACP,CAAAA,CAAA,EACjD,WAAAQ,EAEE,mBACMC,EAcV,UAAAM,EACD,gBAAAjB,CAAAA,GAKG,EAiBFkB,EAAA,CACDd,OAAAA,IAAA,CAEYe,KAAAA,CAAAA,EAAWP,CAAQ,EAAAL,EAAAA,SAAA,CAAA,EACtBH,CAAAI,EAAMC,CAAA,EAAAF,WAAA,CAAA,KAAA,CAAA,EACZ,aACAhB,EACG,CACW,KAAGC,EAAEH,SAAO,KACd,aAAAgB,EAad,SAAA,GACD,YAAA,IAAAC,EAAAO,GAAAC,KAAAC,IAAA,EAAAF,EAAA,CAAA,CAAA,EAACV,YAAA,IAAAG,EAAAO,GAAAC,KAAAE,IAAA,GAAAH,EAAA,CAAA,CAAA,EAAAV,aAAAA,EAAA,mBAAAD,GAAAO,EAAA,CAAAP,CAAAA,CAAA,EAAA,WAAA,CAAA,EAAA,mBAAA,IAAA,CAAA,EAAA,UAAAe,EAAA,gBAAAjB,CAAAA,GAAAkB,EAAAC,EAAA,CAAAf,OAAAA,IAAA,CAAAgB,KAAA,CAAAf,EAAAC,CAAA,EAAAC,EAAAA,SAAA,CAAA,eAAAhB,EAAA,CAAA,KAAA,CAAAW,GAAA,EAAAb,MAAA,mEAAA,EAAA,SAAA,KAAA,aAAAgB,EAAAc,SAAA,GAAAA,YAAA,IAAAb,EAAAO,GAAAC,KAAAC,IAAA,EAAAF,EAAA,CAAA,CAAA,EAAA,YAAA,IAAAP,EAAAO,GAAAC,KAAAE,IAAA,GAAAH,EAAA,CAAA,CAAA,EAAA,aAAA,CAAA,EAAA,mBAAA,IAAA,CAAA,EAAA,WAAA,CAAA,EAAA,mBAAA,IAAA,CAAA,EAAA,UAAA,KAAA,gBAAAb,CAAAA;;;;;;;;;;;;;;;;;;;;;"}