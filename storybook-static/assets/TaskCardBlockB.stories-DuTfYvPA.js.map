{"version":3,"file":"TaskCardBlockB.stories-DuTfYvPA.js","sources":["../../components/stories/TaskCardBlockB.stories.tsx"],"sourcesContent":["import { TaskCardBlock } from \"../ui/TaskCardBlock\";\r\nimport type { Meta, StoryObj } from \"@storybook/react\";\r\nimport React, { useState } from \"react\";\r\nimport { Popover, PopoverTrigger, PopoverContent } from \"../ui/popover\";\r\nimport { Badge } from \"../ui/badge\";\r\n\r\nconst meta: Meta<typeof TaskCardBlock> = {\r\n  title: \"Blocks/TaskCardBlockB\",\r\n  component: TaskCardBlock,\r\n};\r\nexport default meta;\r\n\r\ntype Story = StoryObj<typeof TaskCardBlock>;\r\n\r\nconst mockItem = {\r\n  id: 1,\r\n  title: \"№1. Средства связи предложений в тексте\",\r\n};\r\nconst mockCategory = \"Синтаксис\";\r\nconst mockCategories = [\"Синтаксис\", \"Орфография\", \"Пунктуация\"];\r\nconst mockItemStats = { easiest: 2, easy: 5, medium: 10, hard: 6, hardest: 1 };\r\nconst mockDifficultyTiers = [\r\n  { id: \"easiest\", label: \"Самые лёгкие\" },\r\n  { id: \"easy\", label: \"Лёгкие\" },\r\n  { id: \"medium\", label: \"Средние\" },\r\n  { id: \"hard\", label: \"Сложные\" },\r\n  { id: \"hardest\", label: \"Самые сложные\" },\r\n];\r\n\r\nexport const FullCard_B: Story = {\r\n  render: () => {\r\n    const categories = [\r\n      \"Орфография\",\r\n      \"Пунктуация\",\r\n      \"Лексика\",\r\n      \"Морфология\",\r\n    ];\r\n    const [currentCount, setCurrentCount] = useState(0);\r\n    const [difficulties, setDifficulties] = useState<string[]>([\"any\"]);\r\n    const [catSelected, setCatSelected] = useState<string[]>([...categories]);\r\n    const allTierIds = mockDifficultyTiers.map((t) => t.id);\r\n    \r\n    // Логика выбора сложности\r\n    const handleDiffChange = (id: string) => {\r\n      if (id === \"any\") {\r\n        setDifficulties([\"any\"]);\r\n        return;\r\n      }\r\n      let newValue = difficulties.includes(id)\r\n        ? difficulties.filter((v) => v !== id)\r\n        : [...difficulties.filter((v) => v !== \"any\"), id];\r\n      if (newValue.length === 0) newValue = [\"any\"];\r\n      if (newValue.length === allTierIds.length) newValue = [\"any\"];\r\n      setDifficulties(newValue);\r\n    };\r\n    \r\n    // Логика выбора категорий\r\n    const handleCatChange = (cat: string) => {\r\n      let newSelected;\r\n      if (catSelected.includes(cat)) {\r\n        newSelected = catSelected.filter((c) => c !== cat);\r\n      } else {\r\n        newSelected = [...catSelected, cat];\r\n      }\r\n      if (newSelected.length === 0) newSelected = [...categories];\r\n      if (newSelected.length === categories.length) newSelected = [...categories];\r\n      setCatSelected(newSelected);\r\n    };\r\n    \r\n    // DropdownChips для сложности\r\n    const [diffOpen, setDiffOpen] = useState(false);\r\n    const getDiffLabel = () => {\r\n      if (difficulties.length === 1 && difficulties[0] === \"any\") return \"любая сложность\";\r\n      const labels = difficulties\r\n        .map(\r\n          (v) =>\r\n            v === \"easiest\"\r\n              ? \"самые лёгкие\"\r\n              : v === \"easy\"\r\n              ? \"лёгкие\"\r\n              : v === \"medium\"\r\n              ? \"средние\"\r\n              : v === \"hard\"\r\n              ? \"сложные\"\r\n              : v === \"hardest\"\r\n              ? \"самые сложные\"\r\n              : v.toLowerCase()\r\n        );\r\n      if (labels.length === 1) return labels[0];\r\n      if (labels.length === 2) return `${labels[0]} и ${labels[1]}`;\r\n      if (labels.length > 2) return `${labels[0]}, ${labels[1]} +${labels.length - 2}`;\r\n      return \"\";\r\n    };\r\n    \r\n    // DropdownChips для категорий\r\n    const [catOpen, setCatOpen] = useState(false);\r\n    const getCatLabel = () => {\r\n      if (catSelected.length === categories.length) return \"все категории\";\r\n      const labels = catSelected.map((c) => c.toLowerCase());\r\n      if (labels.length === 1) return labels[0];\r\n      if (labels.length === 2) return `${labels[0]} и ${labels[1]}`;\r\n      if (labels.length > 2) return `${labels[0]}, ${labels[1]} +${labels.length - 2}`;\r\n      return \"\";\r\n    };\r\n    \r\n    // SVG шеврона\r\n    const Chevron = ({ open }: { open: boolean }) => (\r\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" style={{ marginLeft: 6, transition: \"transform 0.2s\", transform: open ? \"rotate(180deg)\" : \"rotate(0deg)\" }}>\r\n        <path d=\"M4.5 6L8 9.5L11.5 6\" stroke=\"#888\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\r\n      </svg>\r\n    );\r\n    \r\n    // Кнопка закрытия для мобильных\r\n    const MobileCloseButton = ({ setOpen }: { setOpen: (v: boolean) => void }) => (\r\n      <button onClick={() => setOpen(false)} style={{ display: \"block\", width: \"100%\", marginTop: 10, padding: \"8px 0\", background: \"#f3f3f3\", border: \"none\", borderRadius: 6, color: \"#333\", fontSize: 14, fontWeight: 500, cursor: \"pointer\" }} className=\"mobile-only\">Закрыть</button>\r\n    );\r\n    \r\n    // Dropdown для сложности с счетчиками\r\n    const difficultyDropdown = (\r\n      <Popover open={diffOpen} onOpenChange={setDiffOpen}>\r\n        <PopoverTrigger asChild>\r\n          <Badge variant=\"outline\" className=\"cursor-pointer py-1 px-3 flex items-center gap-1.5 hover:bg-gray-100 transition-colors dropdown-badge\" style={{ minWidth: 0, width: \"fit-content\", maxWidth: \"none\", paddingRight: 10, paddingLeft: 14, display: \"flex\", alignItems: \"center\", justifyContent: \"space-between\", whiteSpace: \"nowrap\", fontWeight: 400 }}>\r\n            <span className=\"text-xs\" style={{ overflow: \"hidden\", textOverflow: \"ellipsis\", fontWeight: 400 }}>{getDiffLabel()}</span>\r\n            <Chevron open={diffOpen} />\r\n          </Badge>\r\n        </PopoverTrigger>\r\n        <PopoverContent className=\"w-auto p-2\" style={{ minWidth: 220, maxWidth: 320, display: \"flex\", flexWrap: \"wrap\", gap: 8, alignItems: \"stretch\" }}>\r\n          <div style={{ display: \"flex\", flexWrap: \"wrap\", gap: 8 }}>\r\n            <Badge key=\"any\" variant={difficulties.length === 1 && difficulties[0] === \"any\" ? \"default\" : \"outline\"} className={`cursor-pointer transition-colors text-xs px-2 py-0.5 flex items-center gap-1 ${difficulties.length === 1 && difficulties[0] === \"any\" ? \"bg-teal-600 hover:bg-teal-700 text-white border-teal-600\" : \"border-gray-300 text-gray-700 hover:bg-gray-100\"}`} style={{ fontWeight: 400 }} onClick={() => handleDiffChange(\"any\")}>любая сложность <span className=\"text-[14px] font-semibold leading-5\">{Object.values(mockItemStats).reduce((sum, count) => sum + count, 0)}</span></Badge>\r\n            {mockDifficultyTiers.map((tier) => (\r\n              <Badge key={tier.id} variant={difficulties.includes(tier.id) && difficulties[0] !== \"any\" ? \"default\" : \"outline\"} className={`cursor-pointer transition-colors text-xs px-2 py-0.5 flex items-center gap-1 ${difficulties.includes(tier.id) && difficulties[0] !== \"any\" ? \"bg-teal-600 hover:bg-teal-700 text-white border-teal-600\" : \"border-gray-300 text-gray-700 hover:bg-gray-100\"}`} style={{ fontWeight: 400 }} onClick={() => handleDiffChange(tier.id)}>{tier.label.toLowerCase()} <span className=\"text-[14px] font-semibold leading-5\">{(mockItemStats as any)[tier.id]}</span></Badge>\r\n            ))}\r\n          </div>\r\n          <div className=\"desktop-close-hint text-xs\" style={{ marginTop: 10, color: \"#888\", textAlign: \"center\" }}>ESC или клик вне меню для закрытия</div>\r\n          <div className=\"mobile-close-btn\" style={{ display: \"none\" }}><MobileCloseButton setOpen={setDiffOpen} /></div>\r\n          <style>{`\r\n            @media (max-width: 600px) {\r\n              .mobile-close-btn { display: block !important; }\r\n              .desktop-close-hint { display: none !important; }\r\n              .dropdown-badge { width: calc(100vw - 32px) !important; margin: 0 16px !important; max-width: 100vw !important; }\r\n            }\r\n            .dropdown-badge, .dropdown-badge * { font-weight: 400 !important; }\r\n          `}</style>\r\n        </PopoverContent>\r\n      </Popover>\r\n    );\r\n    \r\n    // Dropdown для категорий\r\n    const categoryDropdown = (\r\n      <Popover open={catOpen} onOpenChange={setCatOpen}>\r\n        <PopoverTrigger asChild>\r\n          <Badge variant=\"outline\" className=\"cursor-pointer py-1 px-3 flex items-center gap-1.5 hover:bg-gray-100 transition-colors dropdown-badge\" style={{ minWidth: 0, width: \"fit-content\", maxWidth: \"none\", paddingRight: 10, paddingLeft: 14, display: \"flex\", alignItems: \"center\", justifyContent: \"space-between\", whiteSpace: \"nowrap\", fontWeight: 400 }}>\r\n            <span className=\"text-xs\" style={{ overflow: \"hidden\", textOverflow: \"ellipsis\", fontWeight: 400 }}>{getCatLabel()}</span>\r\n            <Chevron open={catOpen} />\r\n          </Badge>\r\n        </PopoverTrigger>\r\n        <PopoverContent className=\"w-auto p-2\" style={{ minWidth: 220, maxWidth: 320, display: \"flex\", flexWrap: \"wrap\", gap: 8, alignItems: \"stretch\" }}>\r\n          <div style={{ display: \"flex\", flexWrap: \"wrap\", gap: 8 }}>\r\n            <Badge key=\"all\" variant={catSelected.length === categories.length ? \"default\" : \"outline\"} className={`cursor-pointer transition-colors text-xs px-2 py-0.5 flex items-center gap-1 ${catSelected.length === categories.length ? \"bg-teal-600 hover:bg-teal-700 text-white border-teal-600\" : \"border-gray-300 text-gray-700 hover:bg-gray-100\"}`} style={{ fontWeight: 400 }} onClick={() => setCatSelected([...categories])}>Все категории</Badge>\r\n            {categories.map((cat) => (\r\n              <Badge key={cat} variant={catSelected.includes(cat) && catSelected.length !== categories.length ? \"default\" : \"outline\"} className={`cursor-pointer transition-colors text-xs px-2 py-0.5 flex items-center gap-1 ${catSelected.includes(cat) && catSelected.length !== categories.length ? \"bg-teal-600 hover:bg-teal-700 text-white border-teal-600\" : \"border-gray-300 text-gray-700 hover:bg-gray-100\"}`} style={{ fontWeight: 400 }} onClick={() => { if (catSelected.length === categories.length) { setCatSelected([cat]); } else { handleCatChange(cat); } }}>{cat}</Badge>\r\n            ))}\r\n          </div>\r\n          <div className=\"desktop-close-hint text-xs\" style={{ marginTop: 10, color: \"#888\", textAlign: \"center\" }}>ESC или клик вне меню для закрытия</div>\r\n          <div className=\"mobile-close-btn\" style={{ display: \"none\" }}><MobileCloseButton setOpen={setCatOpen} /></div>\r\n          <style>{`\r\n            @media (max-width: 600px) {\r\n              .mobile-close-btn { display: block !important; }\r\n              .desktop-close-hint { display: none !important; }\r\n              .dropdown-badge { width: calc(100vw - 32px) !important; margin: 0 16px !important; max-width: 100vw !important; }\r\n            }\r\n            .dropdown-badge, .dropdown-badge * { font-weight: 400 !important; }\r\n          `}</style>\r\n        </PopoverContent>\r\n      </Popover>\r\n    );\r\n    \r\n    return (\r\n      <div style={{ width: \"100%\" }}>\r\n        <TaskCardBlock\r\n          item={{ ...mockItem, title: \"№1. Средства связи предложений в тексте\" }}\r\n          category={null}\r\n          currentCount={currentCount}\r\n          maxCount={20}\r\n          onDecrement={() => setCurrentCount((c) => Math.max(0, c - 1))}\r\n          onIncrement={() => setCurrentCount((c) => Math.min(20, c + 1))}\r\n          difficulties={difficulties}\r\n          onDifficultyChange={handleDiffChange}\r\n          categories={catSelected}\r\n          onCategoriesChange={setCatSelected}\r\n          itemStats={mockItemStats}\r\n          difficultyTiers={mockDifficultyTiers}\r\n          difficultyDropdown={difficultyDropdown}\r\n          categoryDropdown={categoryDropdown}\r\n        />\r\n        <style>{`\r\n          @media (max-width: 600px) {\r\n            .task-card-block-controls {\r\n              flex-direction: column !important;\r\n              align-items: flex-start !important;\r\n              gap: 10px !important;\r\n            }\r\n            .dropdown-badge, .category-dropdown-badge, .difficulty-dropdown-badge {\r\n              width: auto !important;\r\n              max-width: 95vw !important;\r\n              margin: 0 !important;\r\n            }\r\n            .popover-close-btn {\r\n              width: 100% !important;\r\n              padding: 12px 0 !important;\r\n              margin-top: 12px !important;\r\n              border-radius: 8px !important;\r\n              background: #f3f3f3 !important;\r\n              font-size: 16px !important;\r\n              font-weight: 500 !important;\r\n              border: none !important;\r\n              text-align: center !important;\r\n              cursor: pointer !important;\r\n              color: #222 !important;\r\n              box-shadow: none !important;\r\n              display: block !important;\r\n            }\r\n          }\r\n        `}</style>\r\n      </div>\r\n    );\r\n  },\r\n}; "],"names":["title","component","TaskCardBlock","mockItem","mockCategory","mockCategories","medium","easiest","easy","hard","hardest","mockDifficultyTiers","label","id","FullCard_B","render","categories","currentCount","setCurrentCount","useState","difficulties","setDifficulties","catSelected","setCatSelected","map","t","handleDiffChange","allTierIds","newValue","includes","v","filter","length","handleCatChange","newSelected","c","cat","diffOpen","getDiffLabel","labels","getCatLabel","catOpen","setCatOpen","Chevron","open","toLowerCase","marginLeft","transition","transform","MobileCloseButton","setOpen","display","width","marginTop","padding","background","border","borderRadius","color","fontSize","fontWeight","cursor","setDiffOpen","Badge","minWidth","maxWidth","paddingRight","paddingLeft","alignItems","justifyContent","whiteSpace","overflow","textOverflow","flexWrap","gap","Object","values","mockItemStats","reduce","sum","count","tier","textAlign","categoryDropdown","Popover","PopoverTrigger","Math","max","min","difficultyDropdown","parameters","docs","source","originalSource"],"mappings":"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"}